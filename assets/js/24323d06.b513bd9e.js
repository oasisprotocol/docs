"use strict";(globalThis.webpackChunkdocs_oasis_io=globalThis.webpackChunkdocs_oasis_io||[]).push([[1229],{28453:(e,o,s)=>{s.d(o,{R:()=>i,x:()=>c});var t=s(96540);const r={},n=t.createContext(r);function i(e){const o=t.useContext(n);return t.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(n.Provider,{value:o},e.children)}},80324:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"core/authenticated-grpc","title":"Authenticated gRPC","description":"Oasis Core nodes communicate between themselves over various protocols. One of","source":"@site/docs/core/authenticated-grpc.md","sourceDirName":"core","slug":"/core/authenticated-grpc","permalink":"/core/authenticated-grpc","draft":false,"unlisted":false,"editUrl":"https://github.com/oasisprotocol/oasis-core/edit/stable/24.2.x/docs/authenticated-grpc.md","tags":[],"version":"current","lastUpdatedAt":1757571245000,"frontMatter":{"sidebar_custom_props":{}},"sidebar":"oasisCore","previous":{"title":"Cryptography","permalink":"/core/crypto"},"next":{"title":"Merklized Key-Value Store (MKVS)","permalink":"/core/mkvs"}}');var r=s(74848),n=s(28453);const i={sidebar_custom_props:{tags:void 0}},c="Authenticated gRPC",a={},l=[{value:"TLS",id:"tls",level:2},{value:"gRPC",id:"grpc",level:2},{value:"CBOR Codec",id:"cbor-codec",level:3},{value:"Errors",id:"errors",level:3},{value:"Service Naming Convention",id:"service-naming-convention",level:3}];function d(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.header,{children:(0,r.jsx)(o.h1,{id:"authenticated-grpc",children:"Authenticated gRPC"})}),"\n",(0,r.jsxs)(o.p,{children:["Oasis Core nodes communicate between themselves over various protocols. One of\nthose protocols is ",(0,r.jsx)(o.a,{href:"https://grpc.io",children:"gRPC"})," which is currently used for the following:"]}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsx)(o.li,{children:"Compute nodes talking to storage nodes."}),"\n",(0,r.jsx)(o.li,{children:"Compute nodes talking to key manager nodes."}),"\n",(0,r.jsx)(o.li,{children:"Key manager nodes talking to other key manager nodes."}),"\n",(0,r.jsx)(o.li,{children:"Clients talking to compute nodes."}),"\n",(0,r.jsx)(o.li,{children:"Clients talking to key manager nodes."}),"\n"]}),"\n",(0,r.jsx)(o.p,{children:"All these communications can have access control policies attached specifying\nwho is allowed to perform certain actions at which point in time. This first\nrequires an authentication mechanism."}),"\n",(0,r.jsx)(o.h2,{id:"tls",children:"TLS"}),"\n",(0,r.jsx)(o.p,{children:"In order to authenticate both ends of a connection, gRPC is always used together\nwith TLS. However, since this is a decentralized network, there are some\nspecifics on how peer verification is performed when establishing a TLS session\nbetween two nodes."}),"\n",(0,r.jsxs)(o.p,{children:["Instead of relying on Certificate Authorities, we use the ",(0,r.jsx)(o.a,{href:"/core/consensus/services/registry",children:"registry service"}),"\nprovided by the ",(0,r.jsx)(o.a,{href:"/core/consensus/",children:"consensus layer"}),". Each node publishes its own trusted public\nkeys in the registry as part of its ",(0,r.jsx)(o.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/common/node?tab=doc#Node",children:"signed node descriptor"}),". TLS sessions use\nits own ephemeral ",(0,r.jsx)(o.a,{href:"/core/crypto",children:"Ed25519 key pair"})," that is used to (self-)sign a node's X509\ncertificate. When verifying peer identities the public key on the certificate is\ncompared with the public key(s) published in the registry."]}),"\n",(0,r.jsx)(o.p,{children:"All TLS keys are ephemeral and nodes are encouraged to frequently rotate them\n(the Oasis Core implementation in this repository supports this automatically)."}),"\n",(0,r.jsxs)(o.p,{children:["For details on how certificate verification is performed see\n",(0,r.jsxs)(o.a,{href:"https://github.com/oasisprotocol/oasis-core/tree/master/go/common/crypto/tls/verify.go",children:["the ",(0,r.jsx)(o.code,{children:"VerifyCertificate"})," implementation"]})," in ",(0,r.jsx)(o.a,{href:"https://github.com/oasisprotocol/oasis-core/tree/master/go/common/crypto/tls",children:(0,r.jsx)(o.code,{children:"go/common/crypto/tls"})}),"."]}),"\n",(0,r.jsx)(o.h2,{id:"grpc",children:"gRPC"}),"\n",(0,r.jsx)(o.p,{children:"Oasis Core uses some specific conventions that depart from the most common gRPC\nsetups and are described in the following sections."}),"\n",(0,r.jsx)(o.h3,{id:"cbor-codec",children:"CBOR Codec"}),"\n",(0,r.jsxs)(o.p,{children:["While gRPC is most commonly used with the Protocol Buffers codec the gRPC\nprotocol is agnostic to the actual underlying serialization format. Oasis Core\nuses ",(0,r.jsx)(o.a,{href:"/core/encoding",children:"CBOR"})," for encoding of all messages used in our gRPC services."]}),"\n",(0,r.jsxs)(o.p,{children:["This requires that the codec is explicitly configured while setting up\nconnections. Our ",(0,r.jsx)(o.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/common/grpc?tab=doc",children:"gRPC helpers"})," automatically configure the correct codec so\nusing it should be transparent. The only quirk of this setup is that service\ncodegen is not available with arbitrary codecs, so glue code for both the server\nand the client needs to be generated manually (for examples see the ",(0,r.jsx)(o.code,{children:"grpc.go"}),"\nfiles in various ",(0,r.jsx)(o.code,{children:"api"})," packages)."]}),"\n",(0,r.jsx)(o.h3,{id:"errors",children:"Errors"}),"\n",(0,r.jsx)(o.p,{children:"As gRPC provides very limited error reporting capability in the form of a few\ndefined error codes, we extend this mechanism to support proper error remapping."}),"\n",(0,r.jsxs)(o.p,{children:["Detailed errors are returned as part of the ",(0,r.jsx)(o.a,{href:"https://pkg.go.dev/google.golang.org/genproto/googleapis/rpc/status?tab=doc#Status",children:"gRPC error details structure"}),". The\n",(0,r.jsx)(o.code,{children:"Value"})," field of the first detail element contains the following CBOR-serialized\nstructure that specifies the (namespaced) error:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-golang",children:'type grpcError struct {\n    Module string `json:"module,omitempty"`\n    Code   uint32 `json:"code,omitempty"`\n}\n'})}),"\n",(0,r.jsxs)(o.p,{children:["If you use the provided ",(0,r.jsx)(o.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/common/grpc?tab=doc",children:"gRPC helpers"})," any errors will be mapped to registered\nerror types automatically."]}),"\n",(0,r.jsx)(o.h3,{id:"service-naming-convention",children:"Service Naming Convention"}),"\n",(0,r.jsxs)(o.p,{children:["We use the same service method namespacing convention as gRPC over Protocol\nBuffers. All Oasis Core services have unique identifiers starting with\n",(0,r.jsx)(o.code,{children:"oasis-core."})," followed by the service identifier. A single slash (",(0,r.jsx)(o.code,{children:"/"}),") is used\nas the separator in method names, e.g., ",(0,r.jsx)(o.code,{children:"/oasis-core.Storage/SyncGet"}),"."]})]})}function h(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);