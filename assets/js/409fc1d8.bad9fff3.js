"use strict";(globalThis.webpackChunkdocs_oasis_io=globalThis.webpackChunkdocs_oasis_io||[]).push([[1502],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},54438:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"adrs/0011-incoming-runtime-messages","title":"ADR 0011: Incoming Runtime Messages","description":"Component","source":"@site/docs/adrs/0011-incoming-runtime-messages.md","sourceDirName":"adrs","slug":"/adrs/0011-incoming-runtime-messages","permalink":"/adrs/0011-incoming-runtime-messages","draft":false,"unlisted":false,"editUrl":"https://github.com/oasisprotocol/adrs/edit/main/0011-incoming-runtime-messages.md","tags":[],"version":"current","lastUpdatedAt":1754295238000,"frontMatter":{"sidebar_custom_props":{}},"sidebar":"adrs","previous":{"title":"ADR 0010: VRF-based Committee Elections","permalink":"/adrs/0010-vrf-elections"},"next":{"title":"ADR 0012: Runtime Message Results","permalink":"/adrs/0012-runtime-message-results"}}');var i=s(74848),r=s(28453);const o={sidebar_custom_props:{tags:void 0}},a="ADR 0011: Incoming Runtime Messages",c={},d=[{value:"Component",id:"component",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Incoming Message",id:"incoming-message",level:3},{value:"Executor Commitments",id:"executor-commitments",level:3},{value:"Runtime Block Header",id:"runtime-block-header",level:3},{value:"Runtime Descriptor",id:"runtime-descriptor",level:3},{value:"State",id:"state",level:3},{value:"Transaction Methods",id:"transaction-methods",level:3},{value:"Submit Message",id:"submit-message",level:4},{value:"Queries",id:"queries",level:3},{value:"Runtime Host Protocol",id:"runtime-host-protocol",level:3},{value:"Rust Runtime Support Library",id:"rust-runtime-support-library",level:3},{value:"Executor Processing",id:"executor-processing",level:3},{value:"Runtime Processing",id:"runtime-processing",level:3},{value:"Root Hash Commitment Processing",id:"root-hash-commitment-processing",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"adr-0011-incoming-runtime-messages",children:"ADR 0011: Incoming Runtime Messages"})}),"\n",(0,i.jsx)(n.h2,{id:"component",children:"Component"}),"\n",(0,i.jsx)(n.p,{children:"Oasis Core"}),"\n",(0,i.jsx)(n.h2,{id:"changelog",children:"Changelog"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"2022-01-07: Update based on insights from implementation"}),"\n",(0,i.jsx)(n.li,{children:"2021-12-09: Introduce an explicit fee field, clarify token transfers"}),"\n",(0,i.jsx)(n.li,{children:"2021-10-26: Initial draft"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"status",children:"Status"}),"\n",(0,i.jsx)(n.p,{children:"Accepted"}),"\n",(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsxs)(n.p,{children:["There is currently a single mechanism through which the consensus layer and a\nruntime may interact in a consistent and secure manner. This is the mechanism\nof runtime messages that can be emitted by runtimes (see ",(0,i.jsx)(n.a,{href:"/adrs/0003-consensus-runtime-token-transfer",children:"ADR 3"}),") and allows\nthe consensus layer to act on a runtime's behalf. This mechanism is currently\nused for ",(0,i.jsx)(n.em,{children:"pulling"})," tokens from consensus layer accounts that have previously\nset proper allowances and for updating the runtime descriptor when the runtime\ngovernance model (see ",(0,i.jsx)(n.a,{href:"/adrs/0004-runtime-governance",children:"ADR 4"}),") is in effect."]}),"\n",(0,i.jsx)(n.p,{children:"This ADR proposes to implement the reverse mechanism where anyone issuing a\ntransaction at the consensus layer can queue arbitrary messages for processing\nby the runtime in its next round."}),"\n",(0,i.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,i.jsx)(n.p,{children:"On a high level this proposal affects the following components:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["A new transaction method ",(0,i.jsx)(n.code,{children:"roothash.SubmitMsg"})," is added to the roothash\nconsensus service to queue a new message for the specific runtime."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Additional per-runtime state is added to the roothash service containing the\ncurrently queued messages, sorted by arrival time."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"During processing of a round the proposer may propose to pop any number of\nmessages and process them by pushing them to the runtime, similar as it does\nfor transaction batches. This is of course subject to discrepancy detection."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The runtime host protocol is updated to allow the host to push arbitrary\nincoming messages in addition to the transaction batch."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The runtime descriptor is updated to include a field that specifies the\nmaximum size of the incoming message queue."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"incoming-message",children:"Incoming Message"}),"\n",(0,i.jsx)(n.p,{children:"Each incoming message is represented as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-golang",children:'type IncomingMessage struct {\n    // ID is the unique identifier of the message.\n    ID uint64 `json:"id"`\n\n    // Caller is the address of the caller authenticated by the consensus layer.\n    Caller staking.Address `json:"caller"`\n\n    // Tag is an optional tag provided by the caller which is ignored and can be used to match\n    // processed incoming message events later.\n    Tag uint64 `json:"tag,omitempty"`\n\n    // Fee is the fee sent into the runtime as part of the message being sent.\n    // The fee is transferred before the message is processed by the runtime.\n    Fee quantity.Quantity `json:"fee,omitempty"`\n\n    // Tokens are any tokens sent into the runtime as part of the message being\n    // sent. The tokens are transferred before the message is processed by the\n    // runtime.\n    Tokens quantity.Quantity `json:"tokens,omitempty"`\n\n    // Data is arbitrary runtime-dependent data.\n    Data []byte `json:"data,omitempty"`\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"executor-commitments",children:"Executor Commitments"}),"\n",(0,i.jsx)(n.p,{children:"The compute results header structure is updated to include two fields that\nspecify the number and hash of incoming messages included in a batch as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-golang",children:'type ComputeResultsHeader struct {\n    // ... existing fields omitted ...\n\n    // InMessagesHash is the hash of processed incoming messages.\n    InMessagesHash *hash.Hash `json:"in_msgs_hash,omitempty"`\n    // InMessagesCount is the number of processed incoming messages.\n    InMessagesCount uint32 `json:"in_msgs_count,omitempty"`\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Where the hash of included incoming messages is computed as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-golang",children:"// InMessagesHash returns a hash of provided incoming runtime messages.\nfunc InMessagesHash(msgs []IncomingMessage) (h hash.Hash) {\n    if len(msgs) == 0 {\n        // Special case if there are no messages.\n        h.Empty()\n        return\n    }\n    return hash.NewFrom(msgs)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Note that this also requires the enclave RAK signature (for runtimes requiring\nthe use of TEEs) to be computed over this updated new header."}),"\n",(0,i.jsx)(n.h3,{id:"runtime-block-header",children:"Runtime Block Header"}),"\n",(0,i.jsxs)(n.p,{children:["The runtime block header is updated to include the ",(0,i.jsx)(n.code,{children:"InMessagesHash"})," field as\nfollows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-golang",children:'type Header struct {\n    // ... existing fields omitted ...\n\n    // InMessagesHash is the hash of processed incoming messages.\n    InMessagesHash hash.Hash `json:"in_msgs_hash"`\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"runtime-descriptor",children:"Runtime Descriptor"}),"\n",(0,i.jsxs)(n.p,{children:["This proposal updates the runtime transaction scheduler parameters (stored under\nthe ",(0,i.jsx)(n.code,{children:"txn_scheduler"})," field of the runtime descriptor) as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-golang",children:'type TxnSchedulerParameters struct {\n    // ... existing fields omitted ...\n\n    // MaxInMessages specifies the maximum size of the incoming message queue\n    // for this runtime.\n    MaxInMessages uint32 `json:"max_in_messages,omitempty"`\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["It also updates the runtime staking parameters (stored under the ",(0,i.jsx)(n.code,{children:"staking"})," field\nof the runtime descriptor) as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-golang",children:'type RuntimeStakingParameters struct {\n    // ... existing fields omitted ...\n\n    // MinInMessageFee specifies the minimum fee that the incoming message must\n    // include for the message to be queued.\n    MinInMessageFee quantity.Quantity `json:"min_in_msg_fee,omitempty"`\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"state",children:"State"}),"\n",(0,i.jsx)(n.p,{children:"This proposal introduces/updates the following consensus state in the roothash\nmodule:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Incoming message queue metadata (",(0,i.jsx)(n.code,{children:"0x28"}),")"]})}),"\n",(0,i.jsx)(n.p,{children:"Metadata for the incoming message queue."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"0x28 <H(runtime-id) (hash.Hash)>\n"})}),"\n",(0,i.jsx)(n.p,{children:"The value is the following CBOR-serialized structure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-golang",children:'type IncomingMessageQueue struct {\n    // Size contains the current size of the queue.\n    Size uint32 `json:"size,omitempty"`\n\n    // NextSequenceNumber contains the sequence number that should be used for\n    // the next queued message.\n    NextSequenceNumber uint64 `json:"next_sequence_number,omitempty"`\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Incoming message queue item (",(0,i.jsx)(n.code,{children:"0x29"}),")"]})}),"\n",(0,i.jsx)(n.p,{children:"A queue of incoming messages pending to be delivered to the runtime in the\nnext round."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"0x29 <H(runtime-id) (hash.Hash)> <sequence-no (uint64)>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The value is a CBOR-serialized ",(0,i.jsx)(n.code,{children:"IncomingMessage"})," structure."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"transaction-methods",children:"Transaction Methods"}),"\n",(0,i.jsx)(n.p,{children:"This proposal updates the following transaction methods in the roothash module:"}),"\n",(0,i.jsx)(n.h4,{id:"submit-message",children:"Submit Message"}),"\n",(0,i.jsx)(n.p,{children:"The submit message method allows anyone to submit incoming runtime messages to\nbe queued for delivery to the given runtime."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Method name:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"roothash.SubmitMsg\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Body:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-golang",children:'type SubmitMsg struct {\n    ID     common.Namespace  `json:"id"`\n    Fee    quantity.Quantity `json:"fee,omitempty"`\n    Tokens quantity.Quantity `json:"tokens,omitempty"`\n    Data   []byte            `json:"data,omitempty"`\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"id"})," specifies the destination runtime's identifier."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fee"})," specifies the fee that should be sent into the runtime as part of the\nmessage being sent. The fee is transferred before the message is processed by\nthe runtime."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tokens"})," specifies any tokens to be sent into the runtime as part of the\nmessage being sent. The tokens are transferred before the message is processed\nby the runtime."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"data"})," arbitrary data to be sent to the runtime for processing."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The transaction signer implicitly specifies the caller. Upon executing the\nsubmit message method the following actions are performed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Gas is accounted for (new ",(0,i.jsx)(n.code,{children:"submitmsg"})," gas operation)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The runtime descriptor for runtime ",(0,i.jsx)(n.code,{children:"id"})," is retrieved. If the runtime does not\nexist or is currently suspended the method fails with ",(0,i.jsx)(n.code,{children:"ErrInvalidRuntime"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"txn_scheduler.max_in_messages"})," field in the runtime descriptor is\nchecked. If it is equal to zero the method fails with\n",(0,i.jsx)(n.code,{children:"ErrIncomingMessageQueueFull"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["If the value of the ",(0,i.jsx)(n.code,{children:"fee"})," field is smaller than the value of the\n",(0,i.jsx)(n.code,{children:"staking.min_in_msg_fee"})," field in the runtime descriptor the method fails with\n",(0,i.jsx)(n.code,{children:"ErrIncomingMessageInsufficientFee"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The number of tokens corresponding to ",(0,i.jsx)(n.code,{children:"fee + tokens"})," are moved from the\ncaller's account into the runtime account. If there is insufficient balance to\ndo so the method fails with ",(0,i.jsx)(n.code,{children:"ErrInsufficientBalance"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The incoming queue metadata structure is fetched. If it doesn't yet exist it\nis populated with zero values."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["If the value of the ",(0,i.jsx)(n.code,{children:"size"})," field in the metadata structure is equal to or\nlarger than the value of the ",(0,i.jsx)(n.code,{children:"txn_scheduler.max_in_messages"})," field in the\nruntime descriptor the method fails with ",(0,i.jsx)(n.code,{children:"ErrIncomingMessageQueueFull"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.code,{children:"IncomingMessage"})," structure is generated based on the caller and method\nbody and the value of the ",(0,i.jsx)(n.code,{children:"next_sequence_number"})," metadata field is used to\ngenerate a proper key for storing it in the queue. The structure is inserted\ninto the queue."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"size"})," and ",(0,i.jsx)(n.code,{children:"next_sequence_number"})," fields are incremented and the updated\nmetadata is saved."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"queries",children:"Queries"}),"\n",(0,i.jsxs)(n.p,{children:["This proposal adds the following new query methods in the roothash module by\nupdating the ",(0,i.jsx)(n.code,{children:"roothash.Backend"})," interface as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-golang",children:'type Backend interface {\n    // ... existing methods omitted ...\n\n    // GetIncomingMessageQueueMeta returns the given runtime\'s incoming message queue metadata.\n    GetIncomingMessageQueueMeta(ctx context.Context, request *RuntimeRequest) (*message.IncomingMessageQueueMeta, error)\n\n    // GetIncomingMessageQueue returns the given runtime\'s queued incoming messages.\n    GetIncomingMessageQueue(ctx context.Context, request *InMessageQueueRequest) ([]*message.IncomingMessage, error)\n}\n\n// IncomingMessageQueueMeta is the incoming message queue metadata.\ntype IncomingMessageQueueMeta struct {\n    // Size contains the current size of the queue.\n    Size uint32 `json:"size,omitempty"`\n\n    // NextSequenceNumber contains the sequence number that should be used for the next queued\n    // message.\n    NextSequenceNumber uint64 `json:"next_sequence_number,omitempty"`\n}\n\n// InMessageQueueRequest is a request for queued incoming messages.\ntype InMessageQueueRequest struct {\n    RuntimeID common.Namespace `json:"runtime_id"`\n    Height    int64            `json:"height"`\n\n    Offset uint64 `json:"offset,omitempty"`\n    Limit  uint32 `json:"limit,omitempty"`\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"runtime-host-protocol",children:"Runtime Host Protocol"}),"\n",(0,i.jsx)(n.p,{children:"This proposal updates the existing host to runtime requests in the runtime host\nprotocol as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-golang",children:'type RuntimeExecuteTxBatchRequest struct {\n    // ... existing fields omitted ...\n\n    // IncomingMessages are the incoming messages from the consensus layer that\n    // should be processed by the runtime in this round.\n    IncomingMessages []*IncomingMessage `json:"in_messages,omitempty"`\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"rust-runtime-support-library",children:"Rust Runtime Support Library"}),"\n",(0,i.jsxs)(n.p,{children:["This proposal updates the ",(0,i.jsx)(n.code,{children:"transaction::Dispatcher"})," trait as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"pub trait Dispatcher: Send + Sync {\n    // ... existing unchanged methods omitted ...\n\n    /// Execute the transactions in the given batch.\n    fn execute_batch(\n        &self,\n        ctx: Context,\n        batch: &TxnBatch,\n        in_msgs: Vec<IncomingMessage>, // Added argument.\n    ) -> Result<ExecuteBatchResult, RuntimeError>;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"executor-processing",children:"Executor Processing"}),"\n",(0,i.jsx)(n.p,{children:"The executor processing pipeline is changed such that pending incoming messages\nare queried before the next round starts and are then passed to the runtime via\nthe runtime host protocol."}),"\n",(0,i.jsx)(n.p,{children:"The executor may perform checks to estimate resource use early, similarly to how\nchecks are performed for transactions as they arrive."}),"\n",(0,i.jsx)(n.h3,{id:"runtime-processing",children:"Runtime Processing"}),"\n",(0,i.jsxs)(n.p,{children:["The proposal requires that messages are processed by the runtime in queue order\n(e.g. on each round ",(0,i.jsx)(n.code,{children:"InMessagesCount"})," messages are poped from the queue). This\nsimplifies the design but the runtimes need to carefully consider how much\nresources to allocate for executing messages (vs. regular transactions) in a\nround."]}),"\n",(0,i.jsx)(n.p,{children:'The runtime has full autonomy in choosing how many messages to execute as it\nis given the complete message batch. It should first compute how many messages\nto process by running them in "check" mode and computing how much gas (or other\nresources) they take and then choosing as many as fits.'}),"\n",(0,i.jsxs)(n.p,{children:["Specifying these details is left to the runtime implementation although the SDK\nis expected to adopt an approach with separate ",(0,i.jsx)(n.code,{children:"max_inmsg_gas"})," and\n",(0,i.jsx)(n.code,{children:"max_inmsg_slots"})," parameters which limits how resources are allocated for\nincoming message processing in each round. If a single message exceeds either of\nthese limits it will result in execution failure of that message."]}),"\n",(0,i.jsx)(n.h3,{id:"root-hash-commitment-processing",children:"Root Hash Commitment Processing"}),"\n",(0,i.jsx)(n.p,{children:"The processing of executor commitments is modified as follows:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"No changes are made to the discrepancy detection and resolution protocols\nbesides the newly added fields being taken into account in discrepancy\ndetermination."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["After a successful round, the ",(0,i.jsx)(n.code,{children:"InMessagesCount"})," field of the compute body is\nchecked and the corresponding number of messages are popped from the queue in\nincreasing order of their sequence numbers. The queue metadata is updated\naccoordingly by decrementing the value of the ",(0,i.jsx)(n.code,{children:"size"})," field and the\n",(0,i.jsx)(n.code,{children:"InMessagesHash"})," is added to the newly emitted block header."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,i.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Consensus layer transactions can trigger actions in the runtime without\nadditional runtime transactions. This would also allow pushing tokens into\nthe runtime via a consensus layer transaction or even invoking smart contracts\nthat result in consensus layer actions to happen (via emitted messages)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Each runtime can define the format of incoming messages. The SDK would likely\nuse something that contains a transaction (either signed to support\nnon-Ed25519 callers or unsigned for smaller Ed25519-based transactions) so\narbitrary invocations would be possible."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Storing the queue will increase the size of consensus layer state."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"This could lead to incoming messages being used exclusively to interact with a\nruntime leading to the consensus layer getting clogged with incoming message\nsubmission transactions. Posting such messages would be more expensive though\nas it would require paying per transaction consensus layer fees in addition to\nthe runtime fees. If clogging does eventually happen the fees can be adjusted\nto encourage transaction submission to runtimes directly."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Allows rollup-like constructions where all transactions are posted to the\nconsensus layer first and the runtime is just executing those."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Retrieving the result of processing an incoming message is more involved."}),"\n"]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);