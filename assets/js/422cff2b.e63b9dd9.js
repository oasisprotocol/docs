"use strict";(globalThis.webpackChunkdocs_oasis_io=globalThis.webpackChunkdocs_oasis_io||[]).push([[4040],{11470:(e,t,n)=>{n.d(t,{A:()=>k});var a=n(96540),s=n(34164),r=n(17559),i=n(23104),l=n(56347),o=n(205),c=n(57485),d=n(31682),p=n(70679);function h(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){const{values:t,children:n}=e;return(0,a.useMemo)(()=>{const e=t??function(e){return h(e).map(({props:{value:e,label:t,attributes:n,default:a}})=>({value:e,label:t,attributes:n,default:a}))}(n);return function(e){const t=(0,d.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}function g({value:e,tabValues:t}){return t.some(t=>t.value===e)}function m({queryString:e=!1,groupId:t}){const n=(0,l.W6)(),s=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(s),(0,a.useCallback)(e=>{if(!s)return;const t=new URLSearchParams(n.location.search);t.set(s,e),n.replace({...n.location,search:t.toString()})},[s,n])]}function w(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,r=u(e),[i,l]=(0,a.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!g({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find(e=>e.default)??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r})),[c,d]=m({queryString:n,groupId:s}),[h,w]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,s]=(0,p.Dv)(t);return[n,(0,a.useCallback)(e=>{t&&s.set(e)},[t,s])]}({groupId:s}),x=(()=>{const e=c??h;return g({value:e,tabValues:r})?e:null})();(0,o.A)(()=>{x&&l(x)},[x]);return{selectedValue:i,selectValue:(0,a.useCallback)(e=>{if(!g({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),w(e)},[d,w,r]),tabValues:r}}var x=n(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(74848);function y({className:e,block:t,selectedValue:n,selectValue:a,tabValues:r}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),c=e=>{const t=e.currentTarget,s=l.indexOf(t),i=r[s].value;i!==n&&(o(t),a(i))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:r.map(({value:e,label:t,attributes:a})=>(0,f.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...a,className:(0,s.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":n===e}),children:t??e},e))})}function v({lazy:e,children:t,selectedValue:n}){const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===n);return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:r.map((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))})}function j(e){const t=w(e);return(0,f.jsxs)("div",{className:(0,s.A)(r.G.tabs.container,"tabs-container",b.tabList),children:[(0,f.jsx)(y,{...t,...e}),(0,f.jsx)(v,{...t,...e})]})}function k(e){const t=(0,x.A)();return(0,f.jsx)(j,{...e,children:h(e.children)},String(t))}},19365:(e,t,n)=>{n.d(t,{A:()=>i});n(96540);var a=n(34164);const s={tabItem:"tabItem_Ymn6"};var r=n(74848);function i({children:e,hidden:t,className:n}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,n),hidden:t,children:e})}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var a=n(96540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}},32635:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"build/sapphire/develop/dappwright","title":"End-to-End Testing","description":"End-to-End Testing of Oasis Sapphire dApps","source":"@site/docs/build/sapphire/develop/dappwright.md","sourceDirName":"build/sapphire/develop","slug":"/build/sapphire/develop/dappwright","permalink":"/build/sapphire/develop/dappwright","draft":false,"unlisted":false,"editUrl":"https://github.com/oasisprotocol/sapphire-paratime/edit/main/docs/develop/dappwright.md","tags":[],"version":"current","lastUpdatedAt":1760874442000,"frontMatter":{"description":"End-to-End Testing of Oasis Sapphire dApps","sidebar_custom_props":{}},"sidebar":"developers","previous":{"title":"Testing","permalink":"/build/sapphire/develop/testing"},"next":{"title":"Examples","permalink":"/build/sapphire/examples"}}');var s=n(74848),r=n(28453),i=n(11470),l=n(19365);const o={description:"End-to-End Testing of Oasis Sapphire dApps",sidebar_custom_props:{tags:void 0}},c="End-to-End Testing",d={},p=[{value:"dAppwright",id:"dappwright",level:2},{value:"Installation",id:"installation",level:2},{value:"Setup",id:"setup",level:2},{value:"Adding Test Context",id:"adding-test-context",level:2},{value:"Writing a Test",id:"writing-a-test",level:2},{value:"Debugging",id:"debugging",level:2},{value:"CI",id:"ci",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"end-to-end-testing",children:"End-to-End Testing"})}),"\n",(0,s.jsxs)(t.p,{children:["Many modern web applications utilize ",(0,s.jsx)(t.a,{href:"https://playwright.dev/docs/intro",children:"Playwright"})," tests during the development\nand release process to increase shipping speed and improve quality. While the\nWeb3 dApps ecosystem is still evolving, tools exist to do the same. We recommend\nusing ",(0,s.jsx)(t.a,{href:"https://github.com/TenKeyLabs/dappwright",children:"dAppwright"})," for dApps on the Sapphire Network. In this tutorial, we will\nexamine the e2e testing involved in the ",(0,s.jsx)(t.a,{href:"https://github.com/oasisprotocol/demo-starter",children:"demo-starter"})," project."]}),"\n",(0,s.jsx)(t.h2,{id:"dappwright",children:"dAppwright"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/@tenkeylabs/dappwright",children:"dAppwright package"})," builds on Playwright and includes tooling to support\ntesting with a MetaMask or Coinbase wallet as an extension on a Chromium\nbrowser."]}),"\n",(0,s.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(t.p,{children:["We need to install both ",(0,s.jsx)(t.code,{children:"dAppwright"})," and ",(0,s.jsx)(t.code,{children:"Playwright"}),". Navigate to your\nfrontend application directory:"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Install dAppwright:"}),"\n",(0,s.jsxs)(i.A,{groupId:"npm2yarn",children:[(0,s.jsx)(l.A,{value:"npm",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"npm install -D @tenkeylabs/dappwright\n"})})}),(0,s.jsx)(l.A,{value:"pnpm",label:"pnpm",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"pnpm add -D @tenkeylabs/dappwright\n"})})}),(0,s.jsx)(l.A,{value:"yarn",label:"Yarn",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"yarn add --dev @tenkeylabs/dappwright\n"})})})]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Install Playwright (we recommend the TypeScript option):"}),"\n",(0,s.jsxs)(i.A,{groupId:"npm2yarn",children:[(0,s.jsx)(l.A,{value:"npm",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"npm init playwright@latest\n"})})}),(0,s.jsx)(l.A,{value:"pnpm",label:"pnpm",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"pnpm create playwright\n"})})}),(0,s.jsx)(l.A,{value:"yarn",label:"Yarn",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"yarn create playwright\n"})})})]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"A successful installation should allow the running of the example tests:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"npx playwright test\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(t.p,{children:"We suggest starting a local dev server with each test run to consistently\niterate over the same state."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="playwright.config.ts"',children:"import { defineConfig } from '@playwright/test';\n\nexport default defineConfig({\n  // highlight-start\n  /* Run your local dev server before starting the tests */\n  webServer: {\n    command: 'pnpm dev',\n    url: process.env.FRONTEND_URL || 'http://localhost:8080/',\n    reuseExistingServer: !process.env.CI,\n    stdout: 'pipe',\n    stderr: 'pipe',\n  },\n  // highlight-end\n});\n"})}),"\n",(0,s.jsx)(t.h2,{id:"adding-test-context",children:"Adding Test Context"}),"\n",(0,s.jsx)(t.p,{children:"We begin with a test file extending the testing context to include dAppwright:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="tests/e2e.spec.ts"',children:"import { BrowserContext, expect, test as baseTest } from '@playwright/test'\nimport dappwright, { Dappwright, MetaMaskWallet } from '@tenkeylabs/dappwright'\n\nexport const test = baseTest.extend<{\n  context: BrowserContext\n  wallet: Dappwright\n}>({\n  context: async ({}, use) => {\n    // Launch context with extension\n    const [wallet, _, context] = await dappwright.bootstrap('', {\n      wallet: 'metamask',\n      version: MetaMaskWallet.recommendedVersion,\n      seed: 'test test test test test test test test test test test junk', // Hardhat's default https://hardhat.org/hardhat-network/docs/reference#accounts\n      headless: false,\n    })\n\n    // Add Sapphire Localnet as a custom network\n    await wallet.addNetwork({\n      networkName: 'Sapphire Localnet',\n      rpc: 'http://localhost:8545',\n      chainId: 23293,\n      symbol: 'ROSE',\n    })\n\n    await use(context)\n  },\n\n  wallet: async ({ context }, use) => {\n    const metamask = await dappwright.getWallet('metamask', context)\n\n    await use(metamask)\n  },\n})\n...\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The above snippet includes the Sapphire ",(0,s.jsx)(t.a,{href:"/build/tools/localnet",children:"Localnet"})," as a network with the\ncorrect RPC for testing, and sets up the default MetaMask wallet to use the\nsame ",(0,s.jsx)(t.a,{href:"https://hardhat.org/hardhat-network/docs/reference#accounts",children:"seed"})," as you would in a Hardhat test."]}),"\n",(0,s.jsx)(t.h2,{id:"writing-a-test",children:"Writing a Test"}),"\n",(0,s.jsx)(t.p,{children:"Writing a test with dAppwright is very similar to how you would write a\nPlaywright one. The first step is to navigate to our application:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="tests/e2e.spec.ts"',children:"test.beforeEach(async ({ page }) => {\n  await page.goto('http://localhost:5173')\n})\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Next, we can load the application and confirm using the Sapphire network in\nMetamask. Note that ",(0,s.jsxs)(t.strong,{children:["we will need to use ",(0,s.jsx)(t.code,{children:"wallet.approve"})," to access the\nMetaMask extension which waits for the MetaMask dom to reload."]})," Depending on\nyour use case, you may force your extension page to reload with\n",(0,s.jsx)(t.code,{children:"wallet.page.reload()"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="tests/e2e.spec.ts"',children:"test('set and view message', async ({ wallet, page }) => {\n  // Load page\n  await page.getByTestId('rk-connect-button').click()\n  await page.getByTestId('rk-wallet-option-injected-sapphire').click()\n  await wallet.approve()\n})\n"})}),"\n",(0,s.jsx)(t.p,{children:"Otherwise, we write selectors and assertions in the same way."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:'title="tests/e2e.spec.ts"',children:"  // Set a message\n  await page.locator(':text-matches(\"0x.{40}\")').fill('hola amigos')\n  const submitBtn = page.getByRole('button', { name: 'Set Message' })\n  await submitBtn.click()\n  await wallet.confirmTransaction()\n\n  // Reveal the message\n  await expect(submitBtn).toBeEnabled()\n  await page.locator('[data-label=\"Tap to reveal\"]').click()\n  await wallet.confirmTransaction()\n\n  // Assert message has been set\n  await expect(page.locator('[data-label=\"Tap to reveal\"]').locator('input')).toHaveValue('hola amigos')\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can make assertions in the same way on the wallet page, but\n",(0,s.jsx)(t.a,{href:"https://github.com/TenKeyLabs/dappwright/blob/d791017c51edc4e61e786504c154f9ad3db43ab6/src/wallets/wallet.ts#L27-L45",children:"wallet actions"})," will significantly simplify the amount of boilerplate testing\ncode."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'  await expect(wallet.page.getByText("My Account Name")).toBeVisible();\n'})}),"\n",(0,s.jsx)(t.h2,{id:"debugging",children:"Debugging"}),"\n",(0,s.jsx)(t.p,{children:"Playwright's UI mode is very beneficial to debugging your tests as you develop.\nThe pick locator button will help you refine element selectors while giving\nvisual feedback."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"npx playwright test --ui\n"})}),"\n",(0,s.jsx)(t.p,{children:"Alternatively, you can leverage the debug mode which allows you to set\nbreakpoints, pause testing, and examine network requests."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"npx playwright test --debug\n"})}),"\n",(0,s.jsx)(t.h2,{id:"ci",children:"CI"}),"\n",(0,s.jsxs)(t.p,{children:["Running your dAppwright tests on CI environments like GitHub is possible with\nthe right configurations. You will need to install ",(0,s.jsx)(t.code,{children:"playwright"})," itself as a\ndependency before you can install Playwright's dependency packages, and\nrun a ",(0,s.jsx)(t.a,{href:"https://playwright.dev/docs/ci#running-headed",children:"headed"})," execution in Linux agents with ",(0,s.jsx)(t.code,{children:"Xvfb"}),". We recommend uploading\ntest results on failure to more quickly move through CI cycles."]}),"\n",(0,s.jsxs)(t.p,{children:["You will need a Sapphire ",(0,s.jsx)(t.a,{href:"/build/tools/localnet",children:"Localnet"})," service to provide an RPC endpoint during\ntesting."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'  playwright-test:\n    runs-on: ubuntu-latest\n    // highlight-start\n    services:\n      sapphire-localnet-ci:\n        image: ghcr.io/oasisprotocol/sapphire-localnet:latest\n        ports:\n          - 8545:8545\n          - 8546:8546\n        env:\n          OASIS_DOCKER_START_EXPLORER: no\n        options: >-\n          --rm\n          --health-cmd="test -f /CONTAINER_READY"\n          --health-start-period=90s\n    // highlight-end\n'})}),"\n",(0,s.jsxs)(t.p,{children:["We recommend saving deployed smart contract addresses as environment variables\nand ",(0,s.jsx)(t.a,{href:"https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/passing-information-between-jobs",children:"passing"})," ",(0,s.jsx)(t.code,{children:"$GITHUB_OUTPUT"})," to a subsequent testing step."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"      - name: Deploy backend\n        working-directory: backend\n        id: deploy\n        run: |\n          echo \"message_box_address=$(pnpm hardhat deploy localhost --network sapphire-localnet | grep -o '0x.*')\" >> $GITHUB_OUTPUT\n"})}),"\n",(0,s.jsx)(t.p,{children:"Finally, run the test and upload results on failure:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"      - name: Build\n        working-directory: frontend\n        run: pnpm build\n\n      - name: Install Playwright dependencies\n        run: pnpm test:setup\n        working-directory: frontend\n\n      - name: Run playwright tests (with xvfb-run to support headed extension test)\n        working-directory: frontend\n        run: xvfb-run pnpm test\n        env:\n          VITE_MESSAGE_BOX_ADDR: ${{ steps.deploy.outputs.message_box_address }}\n\n      - name: Upload playwright test-results\n        if: ${{ failure() }}\n        uses: actions/upload-artifact@v4\n        with:\n          name: playwright-test-results\n          path: frontend/test-results\n          retention-days: 5\n"})}),"\n",(0,s.jsx)(t.admonition,{title:"Example: demo-starter",type:"info",children:(0,s.jsxs)(t.p,{children:["If you are interested in seeing how dAppwright is integrated into an example\napplication, check out the ",(0,s.jsx)(t.a,{href:"https://github.com/oasisprotocol/demo-starter",children:"demo-starter"}),"."]})}),"\n",(0,s.jsx)(t.admonition,{title:"Example: wagmi",type:"info",children:(0,s.jsxs)(t.p,{children:["If you are interested in seeing how dAppwright is integrated into a Sapphire\ndApp with Wagmi, check out the ",(0,s.jsx)(t.a,{href:"https://github.com/oasisprotocol/sapphire-paratime/tree/main/examples/wagmi-v2",children:"Wagmi example"}),"."]})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);