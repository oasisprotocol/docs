"use strict";(globalThis.webpackChunkdocs_oasis_io=globalThis.webpackChunkdocs_oasis_io||[]).push([[8025],{22714:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"core/development-setup/building","title":"Building","description":"This chapter contains a description of steps required to build Oasis Core.","source":"@site/docs/core/development-setup/building.md","sourceDirName":"core/development-setup","slug":"/core/development-setup/building","permalink":"/core/development-setup/building","draft":false,"unlisted":false,"editUrl":"https://github.com/oasisprotocol/oasis-core/edit/stable/24.2.x/docs/development-setup/building.md","tags":[],"version":"current","lastUpdatedAt":1757571245000,"frontMatter":{"sidebar_custom_props":{}},"sidebar":"oasisCore","previous":{"title":"Prerequisites","permalink":"/core/development-setup/prerequisites"},"next":{"title":"Running Tests and Development Networks","permalink":"/core/development-setup/running-tests-and-development-networks"}}');var r=s(74848),t=s(28453);const o={sidebar_custom_props:{tags:void 0}},l="Building",d={},a=[{value:"Unsafe Non-SGX Environment",id:"unsafe-non-sgx-environment",level:2},{value:"SGX Environment",id:"sgx-environment",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"building",children:"Building"})}),"\n",(0,r.jsxs)(n.p,{children:["This chapter contains a description of steps required to build Oasis Core.\nBefore proceeding, make sure to look at the ",(0,r.jsx)(n.a,{href:"/core/development-setup/prerequisites",children:"prerequisites"})," required for running\nan Oasis Core environment."]}),"\n",(0,r.jsx)(n.h2,{id:"unsafe-non-sgx-environment",children:"Unsafe Non-SGX Environment"}),"\n",(0,r.jsx)(n.p,{children:"To build everything required for running an Oasis node locally, simply execute\nthe following in the top-level directory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"export OASIS_UNSAFE_SKIP_AVR_VERIFY=1\nexport OASIS_UNSAFE_SKIP_KM_POLICY=1\nexport OASIS_UNSAFE_ALLOW_DEBUG_ENCLAVES=1\nmake\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To build BadgerDB without ",(0,r.jsx)(n.code,{children:"jemalloc"})," support (and avoid installing ",(0,r.jsx)(n.code,{children:"jemalloc"}),"\non your system), set"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"export OASIS_BADGER_NO_JEMALLOC=1\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Not using ",(0,r.jsx)(n.code,{children:"jemalloc"})," is fine for development purposes."]}),"\n",(0,r.jsx)(n.p,{children:"This will build all the required parts (build tools, Oasis node, runtime\nlibraries, runtime loader, key manager and test runtimes). The AVR and KM flags\nare supported on production SGX systems only and these features must be disabled\nin our environment."}),"\n",(0,r.jsx)(n.h2,{id:"sgx-environment",children:"SGX Environment"}),"\n",(0,r.jsx)(n.p,{children:"Compilation procedure under SGX environment is similar to the non-SGX with\nslightly different environmental variables set:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"export OASIS_UNSAFE_SKIP_AVR_VERIFY=1\nexport OASIS_UNSAFE_ALLOW_DEBUG_ENCLAVES=1\nmake\n"})}),"\n",(0,r.jsx)(n.p,{children:"The AVR flag is there because we are running the node in a local development\nenvironment and we will not do any attestation with Intel's remote servers. The\ndebug enclaves flag allows enclaves in debug mode to be used."}),"\n",(0,r.jsx)(n.p,{children:"To run an Oasis node under SGX make sure:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Your hardware has SGX support."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["You either explicitly enabled SGX in BIOS or made a\n",(0,r.jsx)(n.code,{children:"sgx_cap_enable_device()"})," system call, if SGX is in software controlled state."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["You installed ",(0,r.jsx)(n.a,{href:"https://github.com/intel/linux-sgx-driver",children:"Intel's SGX driver"})," (check that ",(0,r.jsx)(n.code,{children:"/dev/isgx"})," exists)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"You have the AESM daemon running. The easiest way is to just run it in a\nDocker container by doing (this will keep the container running and it will\nbe automatically started on boot):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"docker run \\\n  --detach \\\n  --restart always \\\n  --device /dev/isgx \\\n  --volume /var/run/aesmd:/var/run/aesmd \\\n  --name aesmd \\\n  ghcr.io/oasisprotocol/aesmd:master\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Run ",(0,r.jsx)(n.code,{children:"sgx-detect"})," (part of fortanix rust tools) to verify that everything is\nconfigured correctly."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(96540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);