"use strict";(globalThis.webpackChunkdocs_oasis_io=globalThis.webpackChunkdocs_oasis_io||[]).push([[6652],{28453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>i});var r=t(96540);const o={},n=r.createContext(o);function a(e){const s=r.useContext(n);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(n.Provider,{value:s},e.children)}},37022:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"build/rofl/features/storage","title":"Persistent Storage","description":"ROFL developers may use Sapphire smart contracts for secure and consistent","source":"@site/docs/build/rofl/features/storage.md","sourceDirName":"build/rofl/features","slug":"/build/rofl/features/storage","permalink":"/build/rofl/features/storage","draft":false,"unlisted":false,"editUrl":"https://github.com/oasisprotocol/oasis-sdk/edit/main/docs/rofl/features/storage.md","tags":[],"version":"current","lastUpdatedAt":1761563757000,"frontMatter":{"sidebar_custom_props":{}},"sidebar":"developers","previous":{"title":"Secrets","permalink":"/build/rofl/features/secrets"},"next":{"title":"rofl.yaml Manifest File","permalink":"/build/rofl/features/manifest"}}');var o=t(74848),n=t(28453);const a={sidebar_custom_props:{tags:void 0}},i="Persistent Storage",l={},c=[];function d(e){const s={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"persistent-storage",children:"Persistent Storage"})}),"\n",(0,o.jsx)(s.p,{children:"ROFL developers may use Sapphire smart contracts for secure and consistent\nstorage across all ROFL replicas. This storage however, is not appropriate for\nread/write intensive applications. For this reason ROFL has built-in support for\nlocal persistent storage with the following settings:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:"Local per-machine storage, not synchronized across other ROFL replicas."}),"\n",(0,o.jsx)(s.li,{children:"Fully encrypted on the host machine."}),"\n",(0,o.jsx)(s.li,{children:"Preserved during ROFL upgrades and node restarts."}),"\n"]}),"\n",(0,o.jsxs)(s.p,{children:["This type of a storage is particularly useful for caching. Docker images defined\nin the ",(0,o.jsx)(s.code,{children:"compose.yaml"})," file are automatically stored to persistent storage. This\nway they are fetched only the first time an app is deployed, otherwise\na cached version is considered."]}),"\n",(0,o.jsxs)(s.p,{children:["All non-external container volumes will automatically reside in persistent\nstorage. In the example below, we ",(0,o.jsx)(s.a,{href:"https://docs.docker.com/reference/compose-file/volumes/",children:"define a new volume"})," called ",(0,o.jsx)(s.code,{children:"my-volume"})," and\nmake ",(0,o.jsx)(s.code,{children:".ollama"})," in the home folder persistent. This way we avoid downloading\nollama models each time a machine hosting the app is restarted:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-yaml",metastring:'title="compose.yaml"',children:'services:\n  ollama:\n    image: "docker.io/ollama/ollama"\n    ports:\n      - "11434:11434"\n    volumes:\n      - my-volume:/root/.ollama\n    entrypoint: ["/usr/bin/bash", "-c", "/bin/ollama serve & sleep 5; ollama pull deepseek-r1:1.5b; wait"]\n\nvolumes:\n  my-volume:\n'})})]})}function p(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);