"use strict";(globalThis.webpackChunkdocs_oasis_io=globalThis.webpackChunkdocs_oasis_io||[]).push([[4413],{11470:(e,n,r)=>{r.d(n,{A:()=>P});var t=r(96540),s=r(34164),i=r(17559),o=r(23104),a=r(56347),l=r(205),c=r(57485),d=r(31682),h=r(70679);function p(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,t.useMemo)(()=>{const e=n??function(e){return p(e).map(({props:{value:e,label:n,attributes:r,default:t}})=>({value:e,label:n,attributes:r,default:t}))}(r);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function g({queryString:e=!1,groupId:n}){const r=(0,a.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(s),(0,t.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})},[s,r])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:s}=e,i=u(e),[o,a]=(0,t.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find(e=>e.default)??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i})),[c,d]=g({queryString:r,groupId:s}),[p,x]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,s]=(0,h.Dv)(n);return[r,(0,t.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),y=(()=>{const e=c??p;return m({value:e,tabValues:i})?e:null})();(0,l.A)(()=>{y&&a(y)},[y]);return{selectedValue:o,selectValue:(0,t.useCallback)(e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);a(e),d(e),x(e)},[d,x,i]),tabValues:i}}var y=r(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=r(74848);function b({className:e,block:n,selectedValue:r,selectValue:t,tabValues:i}){const a=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),c=e=>{const n=e.currentTarget,s=a.indexOf(n),o=i[s].value;o!==r&&(l(n),t(o))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=a.indexOf(e.currentTarget)+1;n=a[r]??a[0];break}case"ArrowLeft":{const r=a.indexOf(e.currentTarget)-1;n=a[r]??a[a.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:i.map(({value:e,label:n,attributes:t})=>(0,f.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{a.push(e)},onKeyDown:d,onClick:c,...t,className:(0,s.A)("tabs__item",j.tabItem,t?.className,{"tabs__item--active":r===e}),children:n??e},e))})}function v({lazy:e,children:n,selectedValue:r}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===r);return e?(0,t.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r}))})}function w(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,s.A)(i.G.tabs.container,"tabs-container",j.tabList),children:[(0,f.jsx)(b,{...n,...e}),(0,f.jsx)(v,{...n,...e})]})}function P(e){const n=(0,y.A)();return(0,f.jsx)(w,{...e,children:p(e.children)},String(n))}},19365:(e,n,r)=>{r.d(n,{A:()=>o});r(96540);var t=r(34164);const s={tabItem:"tabItem_Ymn6"};var i=r(74848);function o({children:e,hidden:n,className:r}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(s.tabItem,r),hidden:n,children:e})}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(96540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},62099:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/opl-hyperlane-pingpong-flow.mmd-f4a3023c062fb0a81fdab817c1907449.svg"},83555:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"build/opl/hyperlane/pingpong-example","title":"Ping Pong Example","description":"Ping Pong example with Hyperlane Protocol","source":"@site/docs/build/opl/hyperlane/pingpong-example.md","sourceDirName":"build/opl/hyperlane","slug":"/build/opl/hyperlane/pingpong-example","permalink":"/build/opl/hyperlane/pingpong-example","draft":false,"unlisted":false,"editUrl":"https://github.com/oasisprotocol/docs/edit/main/docs/build/opl/hyperlane/pingpong-example.md","tags":[],"version":"current","lastUpdatedAt":1761867754000,"frontMatter":{"description":"Ping Pong example with Hyperlane Protocol","sidebar_custom_props":{}},"sidebar":"developers","previous":{"title":"Relayer","permalink":"/build/opl/hyperlane/relayer"},"next":{"title":"Router Protocol","permalink":"/build/opl/router-protocol/"}}');var s=r(74848),i=r(28453),o=r(11470),a=r(19365);const l={description:"Ping Pong example with Hyperlane Protocol",sidebar_custom_props:{tags:void 0}},c="Ping Pong Example",d={},h=[{value:"Overview Ping Pong",id:"overview-ping-pong",level:2},{value:"Setup",id:"setup",level:2},{value:"Test Token",id:"test-token",level:3},{value:"Add Networks to Hardhat",id:"add-networks-to-hardhat",level:3},{value:"Ping Pong Contract",id:"ping-pong-contract",level:3},{value:"ISM Contract",id:"ism-contract",level:3},{value:"Key Contract Functions",id:"key-contract-functions",level:3},{value:"Deploying the Contracts",id:"deploying-the-contracts",level:2},{value:"Deploying Pong on Sapphire Testnet",id:"deploying-pong-on-sapphire-testnet",level:3},{value:"Deploying Ping on Arbitrum Sepolia",id:"deploying-ping-on-arbitrum-sepolia",level:3},{value:"Deploying ISM on Arbitrum Sepolia",id:"deploying-ism-on-arbitrum-sepolia",level:3},{value:"Contracts setup",id:"contracts-setup",level:2},{value:"Enroll Routers",id:"enroll-routers",level:3},{value:"Enroll Router on Sapphire Testnet",id:"enroll-router-on-sapphire-testnet",level:4},{value:"Enroll Router on Arbitrum Sepolia",id:"enroll-router-on-arbitrum-sepolia",level:4},{value:"Register ISM on Arbitrum Sepolia",id:"register-ism-on-arbitrum-sepolia",level:3},{value:"Run Relayer",id:"run-relayer",level:2},{value:"Executing Ping Pong",id:"executing-ping-pong",level:2},{value:"Verify Ping Pong",id:"verify-ping-pong",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Relayer doesn&#39;t relay message",id:"relayer-doesnt-relay-message",level:3},{value:"Can&#39;t verify messages",id:"cant-verify-messages",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"ping-pong-example",children:"Ping Pong Example"})}),"\n",(0,s.jsxs)(n.p,{children:["This tutorial demonstrates how to send a cross-chain message via\n",(0,s.jsx)(n.a,{href:"https://docs.hyperlane.xyz/docs/intro",children:"Hyperlane Protocol"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"You'll learn how to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Deploy Hyperlane Mailbox-compatible contracts"}),"\n",(0,s.jsx)(n.li,{children:"Deploy trusted relayer ISM(Interchain Security Module)"}),"\n",(0,s.jsx)(n.li,{children:"Run a simple relayer"}),"\n",(0,s.jsx)(n.li,{children:"Send cross-chain messages"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["We recommend using ",(0,s.jsx)(n.a,{href:"https://hardhat.org/",children:"Hardhat"})," for an easy-to-follow experience."]}),"\n",(0,s.jsx)(n.admonition,{title:"Example Code",type:"info",children:(0,s.jsxs)(n.p,{children:["You can find the contracts and hardhat tasks for deployment and execution\nin our ",(0,s.jsx)(n.a,{href:"https://github.com/oasisprotocol/demo-opl/tree/main/examples/hyperlane-pingpong",children:"demo-opl repository"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"overview-ping-pong",children:"Overview Ping Pong"}),"\n",(0,s.jsxs)(n.p,{children:["In this example, you'll deploy a similar contract on two different chains.\nThe contract on Chain A will send a ",(0,s.jsx)(n.code,{children:"ping"})," message to Chain B using\n",(0,s.jsx)(n.em,{children:"Hyperlane Protocol"}),". The contract on Chain B will process this message and\nrespond with a ",(0,s.jsx)(n.code,{children:"ping"})," back to Chain A."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Ping Pong Flow",src:r(62099).A+"",width:"1650",height:"811"})}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create and navigate to a new directory:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mkdir hyperlane-pingpong && cd hyperlane-pingpong\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Initialize a Hardhat project and install dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npx hardhat init\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Add ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@hyperlane-xyz/core",children:(0,s.jsx)(n.code,{children:"@hyperlane-xyz/core"})})," as dependency:"]}),"\n",(0,s.jsxs)(o.A,{groupId:"npm2yarn",children:[(0,s.jsx)(a.A,{value:"npm",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm install -D @hyperlane-xyz/core\n"})})}),(0,s.jsx)(a.A,{value:"pnpm",label:"pnpm",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm add -D @hyperlane-xyz/core\n"})})}),(0,s.jsx)(a.A,{value:"yarn",label:"Yarn",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"yarn add --dev @hyperlane-xyz/core\n"})})})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["There can be some problems with dependencies, be sure to have ",(0,s.jsx)(n.code,{children:"ethers@^6"})," and\n",(0,s.jsx)(n.code,{children:"openzeppelin@^4.9.3"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"test-token",children:"Test Token"}),"\n",(0,s.jsxs)(n.p,{children:["Make sure you have enough test token on ",(0,s.jsx)(n.code,{children:"Arbitrum Sepolia"})," and ",(0,s.jsx)(n.code,{children:"Sapphire Testnet"})]}),"\n",(0,s.jsx)(n.p,{children:"Get more:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["TEST tokens for ",(0,s.jsx)(n.code,{children:"Sapphire Testnet"})," from the ",(0,s.jsx)(n.a,{href:"https://faucet.testnet.oasis.io/",children:"Oasis Faucet"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["ETH tokens for ",(0,s.jsx)(n.code,{children:"Arbitrum Sepolia"})," from Alchemy's ",(0,s.jsx)(n.a,{href:"https://faucets.alchemy.com/faucets/arbitrum-sepolia",children:"Faucet"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"add-networks-to-hardhat",children:"Add Networks to Hardhat"}),"\n",(0,s.jsxs)(n.p,{children:["Open up your ",(0,s.jsx)(n.code,{children:"hardhat.config.ts"})," and add Arbitrum Sepolia and Sapphire\nTestnet."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="hardhat.config.ts"',children:' import { HardhatUserConfig } from "hardhat/config";\n import "@nomicfoundation/hardhat-toolbox";\n\n // highlight-next-line\n const accounts = process.env.PRIVATE_KEY ? [process.env.PRIVATE_KEY] : [];\n\n const config: HardhatUserConfig = {\n  solidity: "0.8.24",\n  // highlight-start\n  networks: {\n    \'arbitrum-sepolia\': {\n      url: \'https://arbitrum-sepolia-rpc.publicnode.com\',\n      chainId: 421614,\n      accounts,\n    },\n    \'sapphire-testnet\': {\n      url: "https://testnet.sapphire.oasis.io",\n      accounts,\n      chainId: 23295, // 0x5aff\n    },\n  },\n  // highlight-end\n };\n\n export default config;\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Sapphire only supports evmVersion ",(0,s.jsx)(n.code,{children:"paris"}),", which is the current default for\nHardhat. Should Hardhat change this, you need to add ",(0,s.jsx)(n.code,{children:'evmVersion: "paris"'})," to\nthe solidity config."]})}),"\n",(0,s.jsx)(n.h3,{id:"ping-pong-contract",children:"Ping Pong Contract"}),"\n",(0,s.jsxs)(n.p,{children:["For this example we leverage the ",(0,s.jsx)(n.code,{children:"Router"})," wrapper from ",(0,s.jsx)(n.em,{children:"Hyperlane"}),". This results in\nfollowing advantages:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Contracts are compatible with ",(0,s.jsx)(n.em,{children:"Hyperlane"}),"'s ",(0,s.jsx)(n.strong,{children:"MailboxClient"})," and ",(0,s.jsx)(n.strong,{children:"IMessageRecipient"}),"\ninterfaces."]}),"\n",(0,s.jsxs)(n.li,{children:["Supports ",(0,s.jsx)(n.em,{children:"enrolling"})," Routers of other chains."]}),"\n",(0,s.jsxs)(n.li,{children:["Supports setting up a ",(0,s.jsx)(n.strong,{children:"custom ISM"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a new file called ",(0,s.jsx)(n.code,{children:"Ping.sol"})," for Arbitrum Sepolia"]}),"\n",(0,s.jsx)(n.li,{children:"Paste the following contract into it:"}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:" Ping.sol Contract "}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="Ping.sol" showLineNumbers',children:'// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\n// ============ External Imports ============\nimport {Router} from "@hyperlane-xyz/core/contracts/client/Router.sol";\n\n/*\n* @title Ping\n* @dev You can use this simple app as a starting point for your own application.\n*/\ncontract Ping is Router {\n    // A generous upper bound on the amount of gas to use in the handle\n    // function when a message is processed. Used for paying for gas.\n    uint256 public constant HANDLE_GAS_AMOUNT = 50_000;\n\n    // A counter of how many messages have been sent from this contract.\n    uint256 public sent;\n    // A counter of how many messages have been received by this contract.\n    uint256 public received;\n\n    // Keyed by domain, a counter of how many messages that have been sent\n    // from this contract to the domain.\n    mapping(uint32 => uint256) public sentTo;\n    // Keyed by domain, a counter of how many messages that have been received\n    // by this contract from the domain.\n    mapping(uint32 => uint256) public receivedFrom;\n\n    // ============ Events ============\n    event SentPing(\n        uint32 indexed origin,\n        uint32 indexed destination,\n        string message\n    );\n    event ReceivedPing(\n        uint32 indexed origin,\n        uint32 indexed destination,\n        bytes32 sender,\n        string message\n    );\n    event HandleGasAmountSet(\n        uint32 indexed destination,\n        uint256 handleGasAmount\n    );\n\n    constructor(address _mailbox) Router(_mailbox) {\n        // Transfer ownership of the contract to deployer\n        _transferOwnership(msg.sender);\n        setHook(address(0));\n    }\n\n    // ============ External functions ============\n\n    /**\n     * @notice Sends a message to the _destinationDomain. Any msg.value is\n     * used as interchain gas payment.\n     * @param _destinationDomain The destination domain to send the message to.\n     * @param _message The message to send.\n     */\n    function sendPing(\n        uint32 _destinationDomain,\n        string calldata _message\n    ) public payable {\n        sent += 1;\n        sentTo[_destinationDomain] += 1;\n        _dispatch(_destinationDomain, bytes(_message));\n        emit SentPing(\n            mailbox.localDomain(),\n            _destinationDomain,\n            _message\n        );\n    }\n\n    /**\n     * @notice Fetches the amount of gas that will be used when a message is\n     * dispatched to the given domain.\n     */\n    function quoteDispatch(\n        uint32 _destinationDomain,\n        bytes calldata _message\n    ) external view returns (uint256) {\n        return _quoteDispatch(_destinationDomain, _message);\n    }\n\n    // ============ Internal functions ============\n    /**\n     * @notice Handles a message from a remote router.\n     * @dev Only called for messages sent from a remote router, as enforced by Router.sol.\n     * @param _origin The domain of the origin of the message.\n     * @param _sender The sender of the message.\n     * @param _message The message body.\n     */\n    function _handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) internal override {\n        received += 1;\n        receivedFrom[_origin] += 1;\n        emit ReceivedPing(\n            _origin,\n            mailbox.localDomain(),\n            _sender,\n            string(_message)\n        );\n    }\n}\n'})})]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["Create a new file called ",(0,s.jsx)(n.code,{children:"Pong.sol"})," for Sapphire Testnet"]}),"\n",(0,s.jsx)(n.li,{children:"Paste the following contract into it:"}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:" Pong.sol Contract "}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="Pong.sol" showLineNumbers',children:'// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\n// ============ External Imports ============\nimport {Router} from "@hyperlane-xyz/core/contracts/client/Router.sol";\n\n/*\n* @title Pong\n* @dev You can use this simple app as a starting point for your own application.\n*/\ncontract Pong is Router {\n    // A generous upper bound on the amount of gas to use in the handle\n    // function when a message is processed. Used for paying for gas.\n    uint256 public constant HANDLE_GAS_AMOUNT = 50_000;\n\n    // A counter of how many messages have been sent from this contract.\n    uint256 public sent;\n    // A counter of how many messages have been received by this contract.\n    uint256 public received;\n\n    // Keyed by domain, a counter of how many messages that have been sent\n    // from this contract to the domain.\n    mapping(uint32 => uint256) public sentTo;\n    // Keyed by domain, a counter of how many messages that have been received\n    // by this contract from the domain.\n    mapping(uint32 => uint256) public receivedFrom;\n\n    // ============ Events ============\n    event SentPing(\n        uint32 indexed origin,\n        uint32 indexed destination,\n        string message\n    );\n    event ReceivedPing(\n        uint32 indexed origin,\n        uint32 indexed destination,\n        bytes32 sender,\n        string message\n    );\n    event HandleGasAmountSet(\n        uint32 indexed destination,\n        uint256 handleGasAmount\n    );\n\n    constructor(address _mailbox) Router(_mailbox) {\n        // Transfer ownership of the contract to deployer\n        _transferOwnership(msg.sender);\n        setHook(address(0));\n    }\n\n    // ============ External functions ============\n\n    /**\n     * @notice Sends a message to the _destinationDomain. Any msg.value is\n     * used as interchain gas payment.\n     * @param _destinationDomain The destination domain to send the message to.\n     * @param _message The message to send.\n     */\n    function sendPing(\n        uint32 _destinationDomain,\n        string calldata _message\n    ) public payable {\n        sent += 1;\n        sentTo[_destinationDomain] += 1;\n        _dispatch(_destinationDomain, bytes(_message));\n        emit SentPing(\n            mailbox.localDomain(),\n            _destinationDomain,\n            _message\n        );\n    }\n\n    /**\n     * @notice Fetches the amount of gas that will be used when a message is\n     * dispatched to the given domain.\n     */\n    function quoteDispatch(\n        uint32 _destinationDomain,\n        bytes calldata _message\n    ) external view returns (uint256) {\n        return _quoteDispatch(_destinationDomain, _message);\n    }\n\n    // ============ Internal functions ============\n    /**\n     * @notice Handles a message from a remote router.\n     * @dev Only called for messages sent from a remote router, as enforced by Router.sol.\n     * @param _origin The domain of the origin of the message.\n     * @param _sender The sender of the message.\n     * @param _message The message body.\n     */\n    function _handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) internal override {\n        received += 1;\n        receivedFrom[_origin] += 1;\n        emit ReceivedPing(\n            _origin,\n            mailbox.localDomain(),\n            _sender,\n            string(_message)\n        );\n        // send return message\n        sendPing(\n            _origin,\n            string(_message)\n        );\n    }\n}\n'})})]}),"\n",(0,s.jsx)(n.h3,{id:"ism-contract",children:"ISM Contract"}),"\n",(0,s.jsxs)(n.p,{children:["In the current state the default ISM of the ",(0,s.jsx)(n.code,{children:"Arbitrum Sepolia"})," Mailbox won't\naccept a message if you send a message from ",(0,s.jsx)(n.code,{children:"Sapphire Testnet"})," to ",(0,s.jsx)(n.code,{children:"Arbitrum Sepolia"}),". You can deploy and register a custom ISM on the ",(0,s.jsx)(n.code,{children:"Arbitrum Sepolia"}),"\ncontract to make it work."]}),"\n",(0,s.jsxs)(n.p,{children:["A simple default ISM from ",(0,s.jsx)(n.em,{children:"Hyperlane"})," is a ",(0,s.jsx)(n.strong,{children:"TrustedRelayerISM"}),", which checks the\nrelayer address before delivering the message."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a new file called ",(0,s.jsx)(n.code,{children:"TrustedRelayerIsm.sol"})]}),"\n",(0,s.jsx)(n.li,{children:"Paste the following contract into it:"}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:" TrustedRelayerIsm.sol Contract "}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",metastring:'title="TrustedRelayerIsm.sol" showLineNumbers',children:'// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;\n\n// ============ Internal Imports ============\nimport {IInterchainSecurityModule} from "@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol";\nimport {Address} from "@openzeppelin/contracts/utils/Address.sol";\nimport {Message} from "@hyperlane-xyz/core/contracts/libs/Message.sol";\nimport {Mailbox} from "@hyperlane-xyz/core/contracts/Mailbox.sol";\nimport {PackageVersioned} from "@hyperlane-xyz/core/contracts/PackageVersioned.sol";\n\ncontract TrustedRelayerIsm is IInterchainSecurityModule, PackageVersioned {\n    using Message for bytes;\n\n    uint8 public immutable moduleType = uint8(Types.NULL);\n    Mailbox public immutable mailbox;\n    address public immutable trustedRelayer;\n\n    constructor(address _mailbox, address _trustedRelayer) {\n        require(\n            _trustedRelayer != address(0),\n            "TrustedRelayerIsm: invalid relayer"\n        );\n        require(\n            Address.isContract(_mailbox),\n            "TrustedRelayerIsm: invalid mailbox"\n        );\n        mailbox = Mailbox(_mailbox);\n        trustedRelayer = _trustedRelayer;\n    }\n\n    function verify(\n        bytes calldata,\n        bytes calldata message\n    ) external view returns (bool) {\n        return mailbox.processor(message.id()) == trustedRelayer;\n    }\n}\n'})})]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["If you want to read more about ",(0,s.jsx)(n.em,{children:"Hyperlane's"})," ",(0,s.jsx)(n.strong,{children:"Interchain Security Modules,"}),"\nvisit the ",(0,s.jsx)(n.a,{href:"https://docs.hyperlane.xyz/docs/protocol/ISM/modular-security",children:"Hyperlane docs"})]})}),"\n",(0,s.jsx)(n.h3,{id:"key-contract-functions",children:"Key Contract Functions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sendPing"}),": Initiates the cross-chain message by calling ",(0,s.jsx)(n.em,{children:"Hyperlane"}),"'s\n",(0,s.jsx)(n.code,{children:"IMailbox.dispatch"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enrollRemoteRouter"}),": In the inherited ",(0,s.jsx)(n.code,{children:"Router"})," contract, to register the\ncontract from the other chain."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"setInterchainSecurityModule"}),": Set the ISM for the contract."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"_handle"}),": To handle incoming messages from the Mailbox (internal function\ncalled by the inherited ",(0,s.jsx)(n.code,{children:"Router"})," contract ",(0,s.jsx)(n.code,{children:"handle"})," function)."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"deploying-the-contracts",children:"Deploying the Contracts"}),"\n",(0,s.jsxs)(n.p,{children:["Deploy the Ping and Pong contracts on two different chains: ",(0,s.jsx)(n.code,{children:"Sapphire Testnet"})," and\n",(0,s.jsx)(n.code,{children:"Arbitrum Sepolia"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Use for deploying either the provided ",(0,s.jsx)(n.code,{children:"deploy-pingpong"})," and ",(0,s.jsx)(n.code,{children:"deploy-ism"})," tasks\nor use the scripts below."]}),"\n",(0,s.jsx)(n.h3,{id:"deploying-pong-on-sapphire-testnet",children:"Deploying Pong on Sapphire Testnet"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a deployment script ",(0,s.jsx)(n.code,{children:"deploypong.ts"})," under ",(0,s.jsx)(n.code,{children:"scripts/"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="deploy.ts"',children:'import { ethers } from "hardhat";\n\nasync function main() {\n  // deployed mailbox on Sapphire Testnet\n  const mailbox = "0x79d3ECb26619B968A68CE9337DfE016aeA471435";\n\n  const PongFactory = await hre.ethers.getContractFactory("Pong");    \n  const pong = await PongFactory.deploy(mailbox);\n  const pongAddr = await pong.waitForDeployment();\n  console.log(`Pong deployed at: ${pongAddr.target}`);\n}\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Run the deployment:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm hardhat run scripts/deploypong.ts --network sapphire-testnet\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"deploying-ping-on-arbitrum-sepolia",children:"Deploying Ping on Arbitrum Sepolia"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a deployment script ",(0,s.jsx)(n.code,{children:"deployping.ts"})," under ",(0,s.jsx)(n.code,{children:"scripts/"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="deploy.ts"',children:'import { ethers } from "hardhat";\n\nasync function main() {\n  // default mailbox on Arbitrum Sepolia\n  const mailbox = "0x598facE78a4302f11E3de0bee1894Da0b2Cb71F8";\n\n  const PingFactory = await ethers.getContractFactory("Ping");    \n  const ping = await PingFactory.deploy(mailbox);\n  const pingAddr = await ping.waitForDeployment();\n  console.log(`Ping deployed at: ${pingAddr.target}`);\n}\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Run the deployment:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm hardhat run scripts/deployping.ts --network arbitrum-sepolia\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"deploying-ism-on-arbitrum-sepolia",children:"Deploying ISM on Arbitrum Sepolia"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a deployment script ",(0,s.jsx)(n.code,{children:"deployISM.ts"})," under ",(0,s.jsx)(n.code,{children:"scripts/"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="deployISM.ts"',children:'import { ethers } from "hardhat";\n\nasync function main() {\n  // default mailbox on Arbitrum Sepolia\n  const mailbox = "0x598facE78a4302f11E3de0bee1894Da0b2Cb71F8";\n  const trustedRelayer = "0x<your relayer address>";\n\n  const trustedRelayerISM = await ethers.deployContract(\n    "TrustedRelayerIsm",\n    [mailbox, trustedRelayer]\n    );\n  await trustedRelayerISM.waitForDeployment();\n  console.log(`TrustedRelayerISM deployed to ${trustedRelayerISM.target}`);\n}\n  main().catch((error) => {\n    console.error(error);\n    process.exitCode = 1;\n  });\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Run the deployment:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm hardhat run scripts/deployISM.ts --network arbitrum-sepolia\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"contracts-setup",children:"Contracts setup"}),"\n",(0,s.jsx)(n.h3,{id:"enroll-routers",children:"Enroll Routers"}),"\n",(0,s.jsx)(n.p,{children:"As we use the Router wrapper for our Ping Pong contracts, we need to enroll the\ncontract addresses of the opposite contract."}),"\n",(0,s.jsx)(n.h4,{id:"enroll-router-on-sapphire-testnet",children:"Enroll Router on Sapphire Testnet"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a file named ",(0,s.jsx)(n.code,{children:"enroll.ts"}),"in the folder ",(0,s.jsx)(n.code,{children:"/scripts"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="enroll.ts"',children:'import { ethers } from "hardhat";\n\nasync function main() {      \n  let pingpongArbitrum = "0x<your contract deployed before>";\n  let pingpongSapphire = "0x<your contract deployed before>";\n  let arbId = "421614";\n\n  const signer = await ethers.provider.getSigner();\n  const contract = await ethers.getContractAt("Pong", sapphireAddr, signer);\n  await contract.enrollRemoteRouter(arbId, ethers.zeroPadValue(pingpongArbitrum, 32));\n  const arbRouter = await contract.routers(arbId);\n  console.log(`remote router adr for ${arbId}: ${arbRouter}`)\n}\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Run the deployment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm hardhat run scripts/enroll.ts --network sapphire-testnet\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"enroll-router-on-arbitrum-sepolia",children:"Enroll Router on Arbitrum Sepolia"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a file named ",(0,s.jsx)(n.code,{children:"enroll.ts"}),"in the folder ",(0,s.jsx)(n.code,{children:"/scripts"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="enroll.ts"',children:'import { ethers } from "hardhat";\n\nasync function main() {\n  let pingpongArbitrum = "0x<your contract deployed before>";\n  let pingpongSapphire = "0x<your contract deployed before>";\n  let sapphireId = "23295";\n\n  const signer = await ethers.provider.getSigner();\n  const contract = await ethers.getContractAt("Ping", pingpongArbitrum, signer);\n  await contract.enrollRemoteRouter(sapphireId, ethers.zeroPadValue(pingpongSapphire, 32));\n  const arbRouter = await contract.routers(sapphireId);\n  console.log(`remote router adr for ${sapphireId}: ${arbRouter}`)\n}\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Run the deployment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm hardhat run scripts/enroll.ts --network arbitrum-sepolia\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"register-ism-on-arbitrum-sepolia",children:"Register ISM on Arbitrum Sepolia"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a file named ",(0,s.jsx)(n.code,{children:"registerIsm.ts"}),"in the folder ",(0,s.jsx)(n.code,{children:"/scripts"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="registerIsm.ts"',children:'import { ethers } from "hardhat";\n\nasync function main() {      \n  let pingpongArbitrum = "0x<your contract deployed before>";\n  let ismAddr = "0x<your ISM contract deployed before>";\n\n  const signer = await ethers.provider.getSigner();\n  const contract = await ethers.getContractAt("Ping", pingpongArbitrum, signer);\n  await contract.setInterchainSecurityModule(ismAddr);\n}\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Run the deployment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm hardhat run scripts/registerIsm.ts --network arbitrum-sepolia\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"run-relayer",children:"Run Relayer"}),"\n",(0,s.jsxs)(n.p,{children:["Before starting to test the Ping Pong, make sure to run a Relayer for ",(0,s.jsx)(n.code,{children:"Arbitrum Sepolia"})," and ",(0,s.jsx)(n.code,{children:"Sapphire Testnet"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For information about how to run a Relayer, visit our ",(0,s.jsx)(n.a,{href:"/build/opl/hyperlane/relayer",children:"Relayer page"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"executing-ping-pong",children:"Executing Ping Pong"}),"\n",(0,s.jsxs)(n.p,{children:["To execute you will call the ",(0,s.jsx)(n.code,{children:"sendPing"})," function on the ",(0,s.jsx)(n.code,{children:"Ping.sol"})," contract."]}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"demo-opl"})," example you can use the provided ",(0,s.jsx)(n.code,{children:"send-ping"})," task or you can\nuse the following script:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a file named ",(0,s.jsx)(n.code,{children:"sendping.ts"}),"in the folder ",(0,s.jsx)(n.code,{children:"/scripts"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="sendping.ts"',children:'import { ethers } from "hardhat";\n\nasync function main() {\n  const destChainId = "23295";\n  const message = "Hello OPL"\n  const pingpongArbitrum = "0x<your pingpong contract deployed on arbitrum sepolia"\n\n  const signer = await ethers.provider.getSigner();\n  const contract = await ethers.getContractAt("Ping", pingpongArbitrum, signer);\n\n  console.log("Calculating fee...");\n  let fee = await contract.quoteDispatch(\n      destChainId,\n      hre.ethers.toUtf8Bytes(message));\n  console.log(`Fee: ${hre.ethers.formatEther(fee)} ETH`);\n  console.log("Sending message...");\n  const tx = await contract.sendPing(destChainId, message, {value: fee});\n  await tx.wait();\n  console.log("Message sent");\n}\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Run the script"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm hardhat run scripts/sendping.ts --network arbitrum-sepolia\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"verify-ping-pong",children:"Verify Ping Pong"}),"\n",(0,s.jsxs)(n.p,{children:["The most simple way to verify the cross-chain messaging is by checking the\nblockchain explorer and check the transaction on your deployed ",(0,s.jsx)(n.code,{children:"Ping"}),"\ncontract."]}),"\n",(0,s.jsx)(n.p,{children:"If you want to monitor the events directly you can use this script:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Create a file named ",(0,s.jsx)(n.code,{children:"verifyping.ts"}),"in the folder ",(0,s.jsx)(n.code,{children:"/scripts"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="verifyping.ts"',children:"import { ethers } from \"hardhat\";\n\nasync function main() {\n  const contractAddr = \"0x<your deployed ping contract on arbitrum sepolia>\"\n  const signer = await ethers.provider.getSigner();\n  const contract = await ethers.getContractAt(\"Ping\", contractAddr, signer);\n\n  const spinner = ['-', '\\\\', '|', '/'];\n  let spinnerIndex = 0;\n  const interval = setInterval(() => {\n      process.stdout.write(`\\rListing for event... ${spinner[spinnerIndex]}`);\n      current = (spinnerIndex + 1) % spinner.length;\n  }, 150);\n\n  let events;\n  do {\n    const block = await ethers.provider.getBlockNumber();\n    events = await contract.queryFilter('ReceivedPing', block - 10, 'latest');\n    if (events.length === 0) {\n      await new Promise(resolve => setTimeout(resolve, 60 * 1000));\n    }\n  } while (events.length === 0);\n  \n  clearInterval(interval);\n  process.stdout.write(`\\r`); \n  process.stdout.clearLine(0);\n\n  const parsedEvent = contract.interface.parseLog(events[0]);\n  const message = parsedEvent?.args?.message;\n  console.log(`Message received with: ${message}`);\n}\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Run the script"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pnpm hardhat run scripts/verifyping.ts --network sapphire-testnet\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"relayer-doesnt-relay-message",children:"Relayer doesn't relay message"}),"\n",(0,s.jsx)(n.p,{children:"Check:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["You have enrolled the opposite Router contract with ",(0,s.jsx)(n.code,{children:"enrollRemoteRouter"}),"\nby calling ",(0,s.jsx)(n.code,{children:"ping.routers(oppositeChainId)"})]}),"\n",(0,s.jsxs)(n.li,{children:["You have set the custom ISM on the ",(0,s.jsx)(n.code,{children:"Arbitrum Sepolia"})," Ping contract by\ncalling ",(0,s.jsx)(n.code,{children:"ping.interchainSecurityModule"})]}),"\n",(0,s.jsx)(n.li,{children:"The relayer address matches the trusted ISM configuration."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cant-verify-messages",children:"Can't verify messages"}),"\n",(0,s.jsx)(n.p,{children:"Check:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Your Hardhat RPC allow historical event queries."}),"\n",(0,s.jsx)(n.li,{children:"Use a dedicated RPC provider (e.g., Alchemy) if necessary."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);