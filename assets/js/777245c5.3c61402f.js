"use strict";(globalThis.webpackChunkdocs_oasis_io=globalThis.webpackChunkdocs_oasis_io||[]).push([[4551],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var o=s(96540);const r={},t=o.createContext(r);function i(e){const n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(t.Provider,{value:n},e.children)}},53718:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"core/consensus/services/governance","title":"Governance","description":"The governance service is responsible for providing an on-chain governance","source":"@site/docs/core/consensus/services/governance.md","sourceDirName":"core/consensus/services","slug":"/core/consensus/services/governance","permalink":"/core/consensus/services/governance","draft":false,"unlisted":false,"editUrl":"https://github.com/oasisprotocol/oasis-core/edit/stable/24.2.x/docs/consensus/services/governance.md","tags":[],"version":"current","lastUpdatedAt":1757571245000,"frontMatter":{"sidebar_custom_props":{}},"sidebar":"oasisCore","previous":{"title":"Committee Scheduler","permalink":"/core/consensus/services/scheduler"},"next":{"title":"Root Hash","permalink":"/core/consensus/services/roothash"}}');var r=s(74848),t=s(28453);const i={sidebar_custom_props:{tags:void 0}},a="Governance",c={},d=[{value:"Methods",id:"methods",level:2},{value:"Submit Proposal",id:"submit-proposal",level:3},{value:"Vote",id:"vote",level:3},{value:"Events",id:"events",level:2},{value:"Proposal Submitted Event",id:"proposal-submitted-event",level:3},{value:"Proposal Finalized Event",id:"proposal-finalized-event",level:3},{value:"Proposal Executed Event",id:"proposal-executed-event",level:3},{value:"Vote Event",id:"vote-event",level:3},{value:"Consensus Parameters",id:"consensus-parameters",level:2},{value:"Test Vectors",id:"test-vectors",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"governance",children:"Governance"})}),"\n",(0,r.jsx)(n.p,{children:"The governance service is responsible for providing an on-chain governance\nmechanism."}),"\n",(0,r.jsxs)(n.p,{children:["The service interface definition lives in ",(0,r.jsx)(n.a,{href:"https://github.com/oasisprotocol/oasis-core/tree/master/go/governance/api",children:(0,r.jsx)(n.code,{children:"go/governance/api"})}),". It defines the\nsupported queries and transactions. For more information you can also check out\nthe ",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/governance/api?tab=doc",children:"consensus service API documentation"})," and the ",(0,r.jsx)(n.a,{href:"/adrs/0006-consensus-governance",children:"governance ADR\nspecification"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.p,{children:"The following sections describe the methods supported by the consensus\ngovernance service."}),"\n",(0,r.jsx)(n.h3,{id:"submit-proposal",children:"Submit Proposal"}),"\n",(0,r.jsx)(n.p,{children:"Proposal submission enables a new consensus layer governance proposal to be\ncreated."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Method name:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"governance.SubmitProposal\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Body:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-golang",children:'// ProposalContent is a consensus layer governance proposal content.\ntype ProposalContent struct {\n    Upgrade       *UpgradeProposal       `json:"upgrade,omitempty"`\n    CancelUpgrade *CancelUpgradeProposal `json:"cancel_upgrade,omitempty"`\n}\n\n// UpgradeProposal is an upgrade proposal.\ntype UpgradeProposal struct {\n    upgrade.Descriptor\n}\n\n// CancelUpgradeProposal is an upgrade cancellation proposal.\ntype CancelUpgradeProposal struct {\n    // ProposalID is the identifier of the pending upgrade proposal.\n    ProposalID uint64 `json:"proposal_id"`\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Fields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"upgrade"})," (optional) specifies an upgrade proposal."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cancel_upgrade"})," (optional) specifies an upgrade cancellation proposal."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Exactly one of the proposal kind fields needs to be non-nil, otherwise the\nproposal is considered malformed."}),"\n",(0,r.jsx)(n.h3,{id:"vote",children:"Vote"}),"\n",(0,r.jsx)(n.p,{children:"Voting for submitted consensus layer governance proposals."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Method name:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"governance.CastVote\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Body:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-golang",children:'type ProposalVote struct {\n    // ID is the unique identifier of a proposal.\n    ID uint64 `json:"id"`\n    // Vote is the vote.\n    Vote Vote `json:"vote"`\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,r.jsx)(n.h3,{id:"proposal-submitted-event",children:"Proposal Submitted Event"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Body:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-golang",children:'type ProposalSubmittedEvent {\n    // ID is the unique identifier of a proposal.\n    ID uint64 `json:"id"`\n    // Submitter is the staking account address of the submitter.\n    Submitter staking.Address `json:"submitter"`\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Emitted for every submitted proposal."}),"\n",(0,r.jsx)(n.h3,{id:"proposal-finalized-event",children:"Proposal Finalized Event"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Body:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-golang",children:'type ProposalFinalizedEvent struct {\n    // ID is the unique identifier of a proposal.\n    ID uint64 `json:"id"`\n    // State is the new proposal state.\n   State ProposalState `json:"state"`\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Emitted when a proposal is finalized."}),"\n",(0,r.jsx)(n.h3,{id:"proposal-executed-event",children:"Proposal Executed Event"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Body:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-golang",children:'type ProposalExecutedEvent {\n    // ID is the unique identifier of a proposal.\n    ID uint64 `json:"id"`\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Emitted when a passed proposal is executed."}),"\n",(0,r.jsx)(n.h3,{id:"vote-event",children:"Vote Event"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Body:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-golang",children:'type VoteEvent {\n    // ID is the unique identifier of a proposal.\n    ID uint64 `json:"id"`\n    // Submitter is the staking account address of the vote submitter.\n    Submitter staking.Address `json:"submitter"`\n    // Vote is the cast vote.\n    Vote Vote `json:"vote"`\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Emitted when a vote is cast."}),"\n",(0,r.jsx)(n.h2,{id:"consensus-parameters",children:"Consensus Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"gas_costs"})," (transaction.Costs) are the governance transaction gas costs."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"min_proposal_deposit"})," (base units) specifies the number of base units that\nare deposited when creating a new proposal."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"voting_period"})," (epochs) specifies the number of epochs after which the voting\nfor a proposal is closed and the votes are tallied."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"quorum"})," (uint8: [0,100]) specifies the minimum percentage of voting power\nthat needs to be cast on a proposal for the result to be valid."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"threshold"})," (uint8: [0,100]) specifies the minimum percentage of ",(0,r.jsx)(n.code,{children:"VoteYes"}),"\nvotes in order for a proposal to be accepted."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"upgrade_min_epoch_diff"})," (epochs) specifies the minimum number of epochs\nbetween the current epoch and the proposed upgrade epoch for the upgrade\nproposal to be valid. Additionally specifies the minimum number of epochs\nbetween two consecutive pending upgrades."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"upgrade_cancel_min_epoch_diff"})," (epochs) specifies the minimum number of\nepochs between the current epoch and the proposed upgrade epoch for the\nupgrade cancellation proposal to be valid."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"test-vectors",children:"Test Vectors"}),"\n",(0,r.jsxs)(n.p,{children:["To generate test vectors for various governance ",(0,r.jsx)(n.a,{href:"/core/consensus/transactions",children:"transactions"}),", run:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"make -C go governance/gen_vectors\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For more information about the structure of the test vectors see the section\non ",(0,r.jsx)(n.a,{href:"/core/consensus/test-vectors",children:"Transaction Test Vectors"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);