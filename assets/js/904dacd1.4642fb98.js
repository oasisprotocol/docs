"use strict";(globalThis.webpackChunkdocs_oasis_io=globalThis.webpackChunkdocs_oasis_io||[]).push([[3993],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var a=i(96540);const s={},r=a.createContext(s);function o(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:n},e.children)}},55479:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"node/run-your-node/keymanager-node/signing-key-manager-policy","title":"Signing Key Manager Policy","description":"This guide will describe how to print and sign an Oasis [key manager policy].","source":"@site/docs/node/run-your-node/keymanager-node/signing-key-manager-policy.md","sourceDirName":"node/run-your-node/keymanager-node","slug":"/node/run-your-node/keymanager-node/signing-key-manager-policy","permalink":"/node/run-your-node/keymanager-node/signing-key-manager-policy","draft":false,"unlisted":false,"editUrl":"https://github.com/oasisprotocol/docs/edit/main/docs/node/run-your-node/keymanager-node/signing-key-manager-policy.md","tags":[],"version":"current","lastUpdatedAt":1761867754000,"frontMatter":{"sidebar_custom_props":{}},"sidebar":"operators","previous":{"title":"Key Manager Node","permalink":"/node/run-your-node/keymanager-node/"},"next":{"title":"Upgrading Key Managers","permalink":"/node/run-your-node/keymanager-node/key-manager-upgrade"}}');var s=i(74848),r=i(28453);const o={sidebar_custom_props:{tags:void 0}},d="Signing Key Manager Policy",t={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Oasis Node Binary",id:"oasis-node-binary",level:3},{value:"Entity",id:"entity",level:3},{value:"Define Variables",id:"define-variables",level:2},{value:"Printing a Policy",id:"printing-a-policy",level:2},{value:"Signing a Policy",id:"signing-a-policy",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"signing-key-manager-policy",children:"Signing Key Manager Policy"})}),"\n",(0,s.jsxs)(n.p,{children:["This guide will describe how to print and sign an Oasis ",(0,s.jsx)(n.a,{href:"/core/consensus/services/keymanager#policies",children:"key manager policy"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"These instructions are only applicable if you are part of a key manager policy\nsigner set."})}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.h3,{id:"oasis-node-binary",children:"Oasis Node Binary"}),"\n",(0,s.jsxs)(n.p,{children:["Make sure you have followed the ",(0,s.jsx)(n.a,{href:"/node/run-your-node/prerequisites/oasis-node",children:"Oasis Node binary installation guide"})," and have\nthe Oasis Node binary installed on your system."]}),"\n",(0,s.jsx)(n.h3,{id:"entity",children:"Entity"}),"\n",(0,s.jsx)(n.p,{children:"Similarly to other things, an entity's private key is used to sign a key manager\npolicy."}),"\n",(0,s.jsxs)(n.p,{children:["The trusted key manager policy signer set (i.e. the authorized public keys) and\nthe threshold of keys that need to sign the policy are hard-coded in the key\nmanager's source code.\nThe trusted signer set for the Oasis Key Manager is defined in ",(0,s.jsx)(n.a,{href:"https://github.com/oasisprotocol/keymanager-paratime/blob/main/src/lib.rs",children:"its source\ncode"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsx)(n.p,{children:"We strongly recommend using a dedicated (single-purpose) entity for signing key\nmanager policies for production key managers, i.e. the ones deployed on\nMainnet and connected to a production ParaTime."})}),"\n",(0,s.jsxs)(n.p,{children:["To provision a new entity, follow the ",(0,s.jsx)(n.a,{href:"/node/run-your-node/validator-node#initialize-entity",children:"instructions in our Validator Node\nguide"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"Currently, Ledger-based signers do not support signing key manager policies."})}),"\n",(0,s.jsxs)(n.admonition,{type:"danger",children:[(0,s.jsxs)(n.p,{children:["In case a file-based signer needs to be used, we strongly recommend using an\n",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Air_gap_(networking)",children:"offline/air-gapped machine"})," for this purpose and never exposing the entity's\nprivate key to an online machine."]}),(0,s.jsx)(n.p,{children:"Gaining access to the entity's private key can compromise the trusted key\nmanager policy signer set and hence the key manager itself."})]}),"\n",(0,s.jsx)(n.h2,{id:"define-variables",children:"Define Variables"}),"\n",(0,s.jsx)(n.p,{children:"For easier handling of key manager policy files, define the following variables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"POLICY=path/to/policy.cbor\nKEY=path/to/entity/key.pem\nNAME=your_name\n"})}),"\n",(0,s.jsx)(n.h2,{id:"printing-a-policy",children:"Printing a Policy"}),"\n",(0,s.jsx)(n.p,{children:"To print and inspect a key manager policy, use the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"oasis-node keymanager verify_policy \\\n  --keymanager.policy.file $POLICY \\\n  --keymanager.policy.ignore.signature \\\n  --verbose\n"})}),"\n",(0,s.jsx)(n.p,{children:"This should output something like the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="Example of an actual Oasis Testnet Key Manager policy"',children:'{\n  "serial": 8,\n  "id": "4000000000000000000000000000000000000000000000004a1a53dff2ae482d",\n  "enclaves": {\n    "ZhD5ufyc/MReZD1qMSKNCRxnkNiZ3BtxqcYdx4+M0N9AJdq369ofvsxONjdgbgISFND0HG0EIv03iyqLiIGEWQ==": {\n      "may_query": {\n        "0000000000000000000000000000000000000000000000000000000000000000": [\n          "c0SidcKhBx3iuonmtXURnFB+qIVkg+nAiaAozAh16ltAJdq369ofvsxONjdgbgISFND0HG0EIv03iyqLiIGEWQ=="\n        ],\n        "000000000000000000000000000000000000000000000000a6d1e3ebf60dff6c": [\n          "LwbLEQ6dv+R5wv5q5CGRZWiEBWGxgCi/gpphcJFQ5zVAJdq369ofvsxONjdgbgISFND0HG0EIv03iyqLiIGEWQ=="\n        ]\n      },\n      "may_replicate": [\n        "jTX8etUcGSQBq3C4WbLlexga7dhQFnwzSJOEmRCPvfRAJdq369ofvsxONjdgbgISFND0HG0EIv03iyqLiIGEWQ=="\n      ]\n    },\n    "jTX8etUcGSQBq3C4WbLlexga7dhQFnwzSJOEmRCPvfRAJdq369ofvsxONjdgbgISFND0HG0EIv03iyqLiIGEWQ==": {\n      "may_query": {\n        "0000000000000000000000000000000000000000000000000000000000000000": [\n          "c0SidcKhBx3iuonmtXURnFB+qIVkg+nAiaAozAh16ltAJdq369ofvsxONjdgbgISFND0HG0EIv03iyqLiIGEWQ=="\n        ],\n        "000000000000000000000000000000000000000000000000a6d1e3ebf60dff6c": [\n          "LwbLEQ6dv+R5wv5q5CGRZWiEBWGxgCi/gpphcJFQ5zVAJdq369ofvsxONjdgbgISFND0HG0EIv03iyqLiIGEWQ=="\n        ]\n      },\n      "may_replicate": []\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:'"serial"'})," key, e.g. ",(0,s.jsx)(n.code,{children:"8"}),", represents the key manager policy's serial number\nthat must increase with every update of the key manager policy."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:'"id"'})," key, e.g.\n",(0,s.jsx)(n.code,{children:'"4000000000000000000000000000000000000000000000004a1a53dff2ae482d"'}),", represents\nthe key manager ParaTime's runtime ID."]}),"\n",(0,s.jsxs)(n.p,{children:["The keys below ",(0,s.jsx)(n.code,{children:'"enclaves"'}),", e.g.\n",(0,s.jsx)(n.code,{children:'"ZhD5ufyc/MReZD1qMSKNCRxnkNiZ3BtxqcYdx4+M0N9AJdq369ofvsxONjdgbgISFND0HG0EIv03iyqLiIGEWQ=="'}),"\nand ",(0,s.jsx)(n.code,{children:'"jTX8etUcGSQBq3C4WbLlexga7dhQFnwzSJOEmRCPvfRAJdq369ofvsxONjdgbgISFND0HG0EIv03iyqLiIGEWQ=="'}),",\nrepresent the identities of the key manager enclaves.\nEach key manager enclave ID is comprised of two parts: its ",(0,s.jsx)(n.code,{children:"MRENCLAVE"})," and its\n",(0,s.jsx)(n.code,{children:"MRSIGNER"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Each key manager enclave identity has two lists: ",(0,s.jsx)(n.code,{children:'"may_query"'})," and\n",(0,s.jsx)(n.code,{children:'"may_replicate"'}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Items in ",(0,s.jsx)(n.code,{children:'"may_query"'})," list, e.g.\n",(0,s.jsx)(n.code,{children:'"0000000000000000000000000000000000000000000000000000000000000000"'})," and\n",(0,s.jsx)(n.code,{children:'"000000000000000000000000000000000000000000000000a6d1e3ebf60dff6c"'}),",\nrepresent the runtime IDs of the ParaTimes that are allowed to query the key\nmanager (in this example, the Cipher and the Sapphire ParaTimes running on the\nTestnet)."]}),"\n",(0,s.jsxs)(n.p,{children:["The items under runtime IDs of the ParaTimes, e.g.\n",(0,s.jsx)(n.code,{children:'"c0SidcKhBx3iuonmtXURnFB+qIVkg+nAiaAozAh16ltAJdq369ofvsxONjdgbgISFND0HG0EIv03iyqLiIGEWQ=="'}),"\nand\n",(0,s.jsx)(n.code,{children:'"LwbLEQ6dv+R5wv5q5CGRZWiEBWGxgCi/gpphcJFQ5zVAJdq369ofvsxONjdgbgISFND0HG0EIv03iyqLiIGEWQ=="'}),",\nrepresent the identities of the runtime enclaves.\nSimilarly to the key manager enclave ID, each runtime enclave ID is comprised of\ntwo parts: its ",(0,s.jsx)(n.code,{children:"MRENCLAVE"})," and its ",(0,s.jsx)(n.code,{children:"MRSIGNER"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Items in ",(0,s.jsx)(n.code,{children:'"may_replicate"'})," list, e.g.\n",(0,s.jsx)(n.code,{children:'"jTX8etUcGSQBq3C4WbLlexga7dhQFnwzSJOEmRCPvfRAJdq369ofvsxONjdgbgISFND0HG0EIv03iyqLiIGEWQ=="'}),",\nrepresent the key manager enclave IDs to which an existing key manager enclave is\nallowed to replicate itself to.\nThis is used for key manager upgrades when an old key manager enclave (i.e. its\nmaster secret) is allowed to replicate itself to a new key manager enclave."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["To see what has changed between two key manager policies, diff the outputs\nof the ",(0,s.jsx)(n.code,{children:"oasis-node keymanager verify_policy"})," commands for the corresponding key\nmanager policy files."]})}),"\n",(0,s.jsx)(n.h2,{id:"signing-a-policy",children:"Signing a Policy"}),"\n",(0,s.jsx)(n.p,{children:"Once a key manager policy has been inspected, use the following command to sign\nit:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"oasis-node keymanager sign_policy \\\n  --keymanager.policy.file $POLICY \\\n  --keymanager.policy.key.file $KEY \\\n  --keymanager.policy.signature.file $POLICY.$NAME.signed\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);