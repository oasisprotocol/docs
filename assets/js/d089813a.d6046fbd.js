"use strict";(globalThis.webpackChunkdocs_oasis_io=globalThis.webpackChunkdocs_oasis_io||[]).push([[8599],{28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var t=n(96540);const r={},i=t.createContext(r);function o(e){const s=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:s},e.children)}},34250:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"core/runtime/messages","title":"Runtime Messages","description":"In order to enable runtimes to perform actions in the consensus layer on their","source":"@site/docs/core/runtime/messages.md","sourceDirName":"core/runtime","slug":"/core/runtime/messages","permalink":"/core/runtime/messages","draft":false,"unlisted":false,"editUrl":"https://github.com/oasisprotocol/oasis-core/edit/stable/24.2.x/docs/runtime/messages.md","tags":[],"version":"current","lastUpdatedAt":1757571245000,"frontMatter":{"sidebar_custom_props":{}},"sidebar":"oasisCore","previous":{"title":"Runtime IDs","permalink":"/core/runtime/identifiers"},"next":{"title":"Oasis Node","permalink":"/core/oasis-node"}}');var r=n(74848),i=n(28453);const o={sidebar_custom_props:{tags:void 0}},a="Runtime Messages",c={},d=[{value:"Supported Messages",id:"supported-messages",level:2},{value:"Staking Method Call",id:"staking-method-call",level:3},{value:"Limits",id:"limits",level:2}];function l(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"runtime-messages",children:"Runtime Messages"})}),"\n",(0,r.jsxs)(s.p,{children:["In order to enable runtimes to perform actions in the consensus layer on their\nbehalf, they can emit ",(0,r.jsx)(s.em,{children:"messages"})," in each round."]}),"\n",(0,r.jsx)(s.h2,{id:"supported-messages",children:"Supported Messages"}),"\n",(0,r.jsx)(s.p,{children:"The following sections describe the methods supported by the consensus roothash\nservice."}),"\n",(0,r.jsx)(s.h3,{id:"staking-method-call",children:"Staking Method Call"}),"\n",(0,r.jsxs)(s.p,{children:["The staking method call message enables a runtime to call one of the supported\n",(0,r.jsx)(s.a,{href:"/core/consensus/services/staking#methods",children:"staking service methods"}),"."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Field name:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"staking\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Body:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-golang",children:'type StakingMessage struct {\n    cbor.Versioned\n\n    Transfer *staking.Transfer `json:"transfer,omitempty"`\n    Withdraw *staking.Withdraw `json:"withdraw,omitempty"`\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Fields:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"v"})," must be set to ",(0,r.jsx)(s.code,{children:"0"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"transfer"})," indicates that the ",(0,r.jsxs)(s.a,{href:"/core/consensus/services/staking#transfer",children:[(0,r.jsx)(s.code,{children:"staking.Transfer"})," method"]})," should be executed."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"withdraw"})," indicates that the ",(0,r.jsxs)(s.a,{href:"/core/consensus/services/staking#withdraw",children:[(0,r.jsx)(s.code,{children:"staking.Withdraw"})," method"]})," should be executed."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Exactly one of the supported method fields needs to be non-nil, otherwise the\nmessage is considered malformed."}),"\n",(0,r.jsx)(s.h2,{id:"limits",children:"Limits"}),"\n",(0,r.jsxs)(s.p,{children:["The maximum number of runtime messages that can be emitted in a single round is\nlimited by the ",(0,r.jsx)(s.code,{children:"executor.max_messages"})," option in the runtime descriptor. Its\nupper bound is the ",(0,r.jsxs)(s.a,{href:"/core/consensus/services/roothash#consensus-parameters",children:[(0,r.jsx)(s.code,{children:"max_messages"})," consensus parameter"]})," of the roothash service."]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);