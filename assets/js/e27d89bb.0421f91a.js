"use strict";(globalThis.webpackChunkdocs_oasis_io=globalThis.webpackChunkdocs_oasis_io||[]).push([[7754],{16033:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"core/consensus/services/registry","title":"Registry","description":"The registry service is responsible for managing a registry of runtime, entity","source":"@site/docs/core/consensus/services/registry.md","sourceDirName":"core/consensus/services","slug":"/core/consensus/services/registry","permalink":"/core/consensus/services/registry","draft":false,"unlisted":false,"editUrl":"https://github.com/oasisprotocol/oasis-core/edit/stable/24.2.x/docs/consensus/services/registry.md","tags":[],"version":"current","lastUpdatedAt":1757571245000,"frontMatter":{"sidebar_custom_props":{}},"sidebar":"oasisCore","previous":{"title":"Staking","permalink":"/core/consensus/services/staking"},"next":{"title":"Committee Scheduler","permalink":"/core/consensus/services/scheduler"}}');var t=s(74848),r=s(28453);const o={sidebar_custom_props:{tags:void 0}},c="Registry",d={},a=[{value:"Resources",id:"resources",level:2},{value:"Entities and Nodes",id:"entities-and-nodes",level:3},{value:"Runtimes",id:"runtimes",level:3},{value:"Methods",id:"methods",level:2},{value:"Register Entity",id:"register-entity",level:3},{value:"Deregister Entity",id:"deregister-entity",level:3},{value:"Register Node",id:"register-node",level:3},{value:"Unfreeze Node",id:"unfreeze-node",level:3},{value:"Register Runtime",id:"register-runtime",level:3},{value:"Events",id:"events",level:2},{value:"Test Vectors",id:"test-vectors",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"registry",children:"Registry"})}),"\n",(0,t.jsx)(n.p,{children:"The registry service is responsible for managing a registry of runtime, entity\nand node public keys and metadata."}),"\n",(0,t.jsxs)(n.p,{children:["The service interface definition lives in ",(0,t.jsx)(n.a,{href:"https://github.com/oasisprotocol/oasis-core/tree/master/go/registry/api",children:(0,t.jsx)(n.code,{children:"go/registry/api"})}),". It defines the\nsupported queries and transactions. For more information you can also check out\nthe ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/registry/api?tab=doc",children:"consensus service API documentation"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsx)(n.p,{children:"The registry service manages different kinds of resources which are described\nfrom a high level perspective in this chapter."}),"\n",(0,t.jsx)(n.h3,{id:"entities-and-nodes",children:"Entities and Nodes"}),"\n",(0,t.jsxs)(n.p,{children:["An entity managed by the registry service is a key pair that owns resources in\nthe registry. It can represent an organization or an individual with ",(0,t.jsx)(n.a,{href:"/core/consensus/services/staking",children:"stake"})," on\nthe network."]}),"\n",(0,t.jsx)(n.p,{children:"Currently, an entity can own the following types of resources:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"nodes and"}),"\n",(0,t.jsx)(n.li,{children:"runtimes."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A node is a device (process running in a VM, on bare metal, in a container,\netc.) that is participating in a committee on the Oasis Core network. It is\nidentified by its own key pair."}),"\n",(0,t.jsxs)(n.p,{children:["The reason for separating entities from nodes is to enable separation of\nconcerns. Both nodes and entities require stake to operate (e.g., to be\nregistered in the registry and be eligible for specific roles). While entities\nhave their own (or ",(0,t.jsx)(n.a,{href:"/core/consensus/services/staking#delegation",children:"delegated"}),") stake, nodes use stake provided by entities that\noperate them. Nodes need to periodically refresh their resource descriptor in\nthe registry in order for it to remain fresh and to do this they need to have\nonline access to their corresponding private key(s)."]}),"\n",(0,t.jsx)(n.p,{children:"On the other hand entities' private keys are more sensitive as they can be used\nto manage stake and other resources. For this reason they should usually be kept\noffline and having entities as separate resources enables that."}),"\n",(0,t.jsx)(n.h3,{id:"runtimes",children:"Runtimes"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.a,{href:"/core/runtime/",children:"runtime"})," is effectively a replicated application with shared state. The\nregistry resource describes a runtime's operational parameters, including its\nidentifier, kind, admission policy, committee scheduling, storage, governance\nmodel, etc. For a full description of the runtime descriptor see\n",(0,t.jsxs)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/registry/api?tab=doc#Runtime",children:["the ",(0,t.jsx)(n.code,{children:"Runtime"})," structure"]}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The chosen governance model indicates how the runtime descriptor can be updated\nin the future."}),"\n",(0,t.jsx)(n.p,{children:"There are currently three supported governance models:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Entity governance"})," where the runtime owner is the only one who can update\nthe runtime descriptor via ",(0,t.jsx)(n.code,{children:"registry.RegisterRuntime"})," method calls."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Runtime-defined governance"})," where the runtime itself is the only one who\ncan update the runtime descriptor by emitting a runtime message."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Consensus layer governance"})," where only the consensus layer itself can\nupdate the runtime descriptor through network governance."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.p,{children:"The following sections describe the methods supported by the consensus registry\nservice."}),"\n",(0,t.jsx)(n.h3,{id:"register-entity",children:"Register Entity"}),"\n",(0,t.jsxs)(n.p,{children:["Entity registration enables a new entity to be created. A new register entity\ntransaction can be generated using ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/registry/api?tab=doc#NewRegisterEntityTx",children:(0,t.jsx)(n.code,{children:"NewRegisterEntityTx"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Method name:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"registry.RegisterEntity\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The body of a register entity transaction must be a ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/common/entity?tab=doc#SignedEntity",children:(0,t.jsx)(n.code,{children:"SignedEntity"})})," structure,\nwhich is a ",(0,t.jsx)(n.a,{href:"/core/crypto#envelopes",children:"signed envelope"})," containing an ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/common/entity?tab=doc#Entity",children:(0,t.jsx)(n.code,{children:"Entity"})})," descriptor. The\nsigner of the entity MUST be the same as the signer of the transaction."]}),"\n",(0,t.jsxs)(n.p,{children:["Registering an entity may require sufficient stake in the entity's\n",(0,t.jsx)(n.a,{href:"/core/consensus/services/staking#escrow",children:"escrow account"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"deregister-entity",children:"Deregister Entity"}),"\n",(0,t.jsxs)(n.p,{children:["Entity deregistration enables an existing entity to be removed. A new deregister\nentity transaction can be generated using ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/registry/api?tab=doc#NewDeregisterEntityTx",children:(0,t.jsx)(n.code,{children:"NewDeregisterEntityTx"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Method name:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"registry.DeregisterEntity\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The body of a register entity transaction must be ",(0,t.jsx)(n.code,{children:"nil"}),". The entity is implied\nto be the signer of the transaction."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"If an entity still has either nodes or runtimes registered, it is not possible\nto deregister an entity and such a transaction will fail."})}),"\n",(0,t.jsx)(n.h3,{id:"register-node",children:"Register Node"}),"\n",(0,t.jsxs)(n.p,{children:["Node registration enables a new node to be created. A new register node\ntransaction can be generated using ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/registry/api?tab=doc#NewRegisterNodeTx",children:(0,t.jsx)(n.code,{children:"NewRegisterNodeTx"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Method name:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"registry.RegisterNode\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The body of a register entity transaction must be a ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/common/node?tab=doc#MultiSignedNode",children:(0,t.jsx)(n.code,{children:"MultiSignedNode"})}),"\nstructure, which is a ",(0,t.jsx)(n.a,{href:"/core/crypto#envelopes",children:"multi-signed envelope"})," containing a ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/common/node?tab=doc#Node",children:(0,t.jsx)(n.code,{children:"Node"})}),"\ndescriptor. The signer of the transaction MUST be the node identity key."]}),"\n",(0,t.jsxs)(n.p,{children:["The owning entity MUST have the given node identity public key whitelisted in\nthe ",(0,t.jsx)(n.code,{children:"Nodes"})," field in its ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/common/entity?tab=doc#Entity",children:(0,t.jsx)(n.code,{children:"Entity"})})," descriptor."]}),"\n",(0,t.jsx)(n.p,{children:"The node descriptor structure MUST be signed by all the following keys:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Node identity key."}),"\n",(0,t.jsx)(n.li,{children:"Consensus key."}),"\n",(0,t.jsx)(n.li,{children:"TLS key."}),"\n",(0,t.jsx)(n.li,{children:"P2P key."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Registering a node may require sufficient stake in the owning entity's\n",(0,t.jsx)(n.a,{href:"/core/consensus/services/staking#escrow",children:"escrow account"}),". There are two kinds of thresholds that the node may need to\nsatisfy:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Global thresholds are the same for all runtimes and are defined by the\nconsensus parameters (see ",(0,t.jsxs)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#ConsensusParameters.Thresholds",children:[(0,t.jsx)(n.code,{children:"Thresholds"})," in staking consensus parameters"]}),")."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.em,{children:"addition"})," to the global thresholds, each runtime the node is registering\nfor may define their own thresholds. The runtime-specific thresholds are\ndefined in the ",(0,t.jsxs)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/registry/api?tab=doc#Runtime.Staking",children:[(0,t.jsx)(n.code,{children:"Staking"})," field"]})," in the runtime descriptor."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In case the node is registering for multiple runtimes, it needs to satisfy the\nsum of thresholds of all the runtimes it is registering for."}),"\n",(0,t.jsx)(n.h3,{id:"unfreeze-node",children:"Unfreeze Node"}),"\n",(0,t.jsxs)(n.p,{children:["Node unfreezing enables a previously frozen (e.g., due to slashing) node to be\nthawed so it can again be eligible for committee elections. A new unfreeze node\ntransaction can be generated using ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/registry/api?tab=doc#NewUnfreezeNodeTx",children:(0,t.jsx)(n.code,{children:"NewUnfreezeNodeTx"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Method name:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"registry.UnfreezeNode\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Body:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-golang",children:'type UnfreezeNode struct {\n    NodeID signature.PublicKey `json:"node_id"`\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Fields:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"node_id"})," specifies the node identifier of the node to thaw."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The transaction signer MUST be the entity key that owns the node."}),"\n",(0,t.jsxs)(n.p,{children:["Thawing a node requires that the node's freeze period has already passed. The\nfreeze period for any given attributable fault (e.g., double signing) is a\nconsensus parameter (see ",(0,t.jsxs)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api?tab=doc#ConsensusParameters.Slashing",children:[(0,t.jsx)(n.code,{children:"Slashing"})," in staking consensus parameters"]}),")."]}),"\n",(0,t.jsx)(n.h3,{id:"register-runtime",children:"Register Runtime"}),"\n",(0,t.jsxs)(n.p,{children:["Runtime registration enables a new runtime to be created. A new register\nruntime transaction can be generated using ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/registry/api?tab=doc#NewRegisterRuntimeTx",children:(0,t.jsx)(n.code,{children:"NewRegisterRuntimeTx"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Method name:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"registry.RegisterRuntime\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The body of a register runtime transaction must be a ",(0,t.jsx)(n.a,{href:"https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/registry/api?tab=doc#Runtime",children:(0,t.jsx)(n.code,{children:"Runtime"})})," descriptor.\nThe signer of the transaction MUST be the owning entity key."]}),"\n",(0,t.jsxs)(n.p,{children:["Registering a runtime may require sufficient stake in either the owning\nentity's (when entity governance is used) or the runtime's (when runtime\ngovernance is used) ",(0,t.jsx)(n.a,{href:"/core/consensus/services/staking#escrow",children:"escrow account"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Changing the governance model from entity governance to runtime governance is\nallowed. Any other governance model changes are not allowed."}),"\n",(0,t.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,t.jsx)(n.h2,{id:"test-vectors",children:"Test Vectors"}),"\n",(0,t.jsxs)(n.p,{children:["To generate test vectors for various registry ",(0,t.jsx)(n.a,{href:"/core/consensus/transactions",children:"transactions"}),", run:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make -C go registry/gen_vectors\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For more information about the structure of the test vectors see the section\non ",(0,t.jsx)(n.a,{href:"/core/consensus/test-vectors",children:"Transaction Test Vectors"}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var i=s(96540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);