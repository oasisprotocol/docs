"use strict";(globalThis.webpackChunkdocs_oasis_io=globalThis.webpackChunkdocs_oasis_io||[]).push([[3802],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(96540);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}},93833:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"build/tools/other-paratimes/cipher/hello-world","title":"Hello World","description":"This chapter will show you how to quickly create, build and test a minimal","source":"@site/docs/build/tools/other-paratimes/cipher/hello-world.md","sourceDirName":"build/tools/other-paratimes/cipher","slug":"/build/tools/other-paratimes/cipher/hello-world","permalink":"/build/tools/other-paratimes/cipher/hello-world","draft":false,"unlisted":false,"editUrl":"https://github.com/oasisprotocol/oasis-sdk/edit/main/docs/contract/hello-world.md","tags":[],"version":"current","lastUpdatedAt":1761867754000,"frontMatter":{"sidebar_custom_props":{}},"sidebar":"developers","previous":{"title":"Network Information","permalink":"/build/tools/other-paratimes/cipher/network"},"next":{"title":"Confidential Hello World","permalink":"/build/tools/other-paratimes/cipher/confidential-smart-contract"}}');var s=n(74848),r=n(28453);const i={sidebar_custom_props:{tags:void 0}},a="Hello World",l={},c=[{value:"Repository Structure and Dependencies",id:"repository-structure-and-dependencies",level:2},{value:"Smart Contract Definition",id:"smart-contract-definition",level:2},{value:"Testing",id:"testing",level:2},{value:"Building for Deployment",id:"building-for-deployment",level:2},{value:"Deploying the Contract",id:"deploying-the-contract",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"hello-world",children:"Hello World"})}),"\n",(0,s.jsx)(t.p,{children:"This chapter will show you how to quickly create, build and test a minimal\nOasis WebAssembly smart contract."}),"\n",(0,s.jsx)(t.h2,{id:"repository-structure-and-dependencies",children:"Repository Structure and Dependencies"}),"\n",(0,s.jsxs)(t.p,{children:["First we create the basic directory structure for the hello world contract using\nRust's ",(0,s.jsx)(t.a,{href:"https://doc.rust-lang.org/cargo",children:(0,s.jsx)(t.code,{children:"cargo"})}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"cargo init --lib hello-world\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This will create the ",(0,s.jsx)(t.code,{children:"hello-world"})," directory and populate it with some\nboilerplate needed to describe a Rust application. It will also set up the\ndirectory for version control using Git. The rest of the guide assumes that you\nare executing commands from within this directory."]}),"\n",(0,s.jsxs)(t.p,{children:["Since the Contract SDK requires a nightly version of the Rust toolchain, you\nneed to specify a version to use by creating a special file called\n",(0,s.jsx)(t.code,{children:"rust-toolchain"})," containing the following information:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'[toolchain]\nchannel = "nightly-2025-05-09"\ncomponents = ["rustfmt", "clippy"]\ntargets = ["x86_64-fortanix-unknown-sgx", "wasm32-unknown-unknown"]\nprofile = "minimal"\n'})}),"\n",(0,s.jsx)(t.p,{children:"After you complete this guide, the minimal runtime directory structure will look\nas follows:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"hello-world\n\u251c\u2500\u2500 Cargo.lock           # Dependency tree checksums (generated on first compilation).\n\u251c\u2500\u2500 Cargo.toml           # Rust crate definition.\n\u251c\u2500\u2500 rust-toolchain.toml  # Rust toolchain version configuration.\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 lib.rs           # Smart contract source code.\n"})}),"\n",(0,s.jsx)(t.h2,{id:"smart-contract-definition",children:"Smart Contract Definition"}),"\n",(0,s.jsxs)(t.p,{children:["First you need to declare some dependencies in order to be able to use the smart\ncontract SDK. Additionally, you will want to specify some optimization flags in\norder to make the compiled smart contract as small as possible. To do this, edit\nyour ",(0,s.jsx)(t.code,{children:"Cargo.toml"})," to look like the following:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-toml",metastring:'title="Cargo.toml"',children:'[package]\nname = "hello-world"\nversion = "0.0.0"\nedition = "2021"\nlicense = "Apache-2.0"\n\n[lib]\ncrate-type = ["cdylib"]\n\n[dependencies]\ncbor = { version = "0.5.1", package = "oasis-cbor" }\noasis-contract-sdk = { git = "https://github.com/oasisprotocol/oasis-sdk", tag = "contract-sdk/v0.4.1" }\noasis-contract-sdk-storage = { git = "https://github.com/oasisprotocol/oasis-sdk", tag = "contract-sdk/v0.4.1" }\n\n# Third party.\nthiserror = "1.0.30"\n\n[profile.release]\nopt-level = 3\ndebug = false\nrpath = false\nlto = true\ndebug-assertions = false\ncodegen-units = 1\npanic = "abort"\nincremental = false\noverflow-checks = true\nstrip = true\n'})}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"We are using Git tags for releases instead of releasing Rust packages on\ncrates.io."})}),"\n",(0,s.jsxs)(t.p,{children:["After you have updated your ",(0,s.jsx)(t.code,{children:"Cargo.toml"})," the next thing is to define the hello\nworld smart contract. To do this, edit ",(0,s.jsx)(t.code,{children:"src/lib.rs"})," with the following\ncontent:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",metastring:'title="src/lib.rs"',children:'//! A minimal hello world smart contract.\nextern crate alloc;\n\nuse oasis_contract_sdk as sdk;\nuse oasis_contract_sdk_storage::cell::PublicCell;\n\n/// All possible errors that can be returned by the contract.\n///\n/// Each error is a triplet of (module, code, message) which allows it to be both easily\n/// human readable and also identifyable programmatically.\n#[derive(Debug, thiserror::Error, sdk::Error)]\npub enum Error {\n    #[error("bad request")]\n    #[sdk_error(code = 1)]\n    BadRequest,\n}\n\n/// All possible requests that the contract can handle.\n///\n/// This includes both calls and queries.\n#[derive(Clone, Debug, cbor::Encode, cbor::Decode)]\npub enum Request {\n    #[cbor(rename = "instantiate")]\n    Instantiate { initial_counter: u64 },\n\n    #[cbor(rename = "say_hello")]\n    SayHello { who: String },\n}\n\n/// All possible responses that the contract can return.\n///\n/// This includes both calls and queries.\n#[derive(Clone, Debug, Eq, PartialEq, cbor::Encode, cbor::Decode)]\npub enum Response {\n    #[cbor(rename = "hello")]\n    Hello { greeting: String },\n\n    #[cbor(rename = "empty")]\n    Empty,\n}\n\n/// The contract type.\npub struct HelloWorld;\n\n/// Storage cell for the counter.\nconst COUNTER: PublicCell<u64> = PublicCell::new(b"counter");\n\nimpl HelloWorld {\n    /// Increment the counter and return the previous value.\n    fn increment_counter<C: sdk::Context>(ctx: &mut C) -> u64 {\n        let counter = COUNTER.get(ctx.public_store()).unwrap_or_default();\n        COUNTER.set(ctx.public_store(), counter + 1);\n\n        counter\n    }\n}\n\n// Implementation of the sdk::Contract trait is required in order for the type to be a contract.\nimpl sdk::Contract for HelloWorld {\n    type Request = Request;\n    type Response = Response;\n    type Error = Error;\n\n    fn instantiate<C: sdk::Context>(ctx: &mut C, request: Request) -> Result<(), Error> {\n        // This method is called during the contracts.Instantiate call when the contract is first\n        // instantiated. It can be used to initialize the contract state.\n        match request {\n            // We require the caller to always pass the Instantiate request.\n            Request::Instantiate { initial_counter } => {\n                // Initialize counter to specified value.\n                COUNTER.set(ctx.public_store(), initial_counter);\n\n                Ok(())\n            }\n            _ => Err(Error::BadRequest),\n        }\n    }\n\n    fn call<C: sdk::Context>(ctx: &mut C, request: Request) -> Result<Response, Error> {\n        // This method is called for each contracts.Call call. It is supposed to handle the request\n        // and return a response.\n        match request {\n            Request::SayHello { who } => {\n                // Increment the counter and retrieve the previous value.\n                let counter = Self::increment_counter(ctx);\n\n                // Return the greeting as a response.\n                Ok(Response::Hello {\n                    greeting: format!("hello {who} ({counter})"),\n                })\n            }\n            _ => Err(Error::BadRequest),\n        }\n    }\n\n    fn query<C: sdk::Context>(_ctx: &mut C, _request: Request) -> Result<Response, Error> {\n        // This method is called for each contracts.Query query. It is supposed to handle the\n        // request and return a response.\n        Err(Error::BadRequest)\n    }\n}\n\n// Create the required Wasm exports required for the contract to be runnable.\nsdk::create_contract!(HelloWorld);\n\n// We define some simple contract tests below.\n#[cfg(test)]\nmod test {\n    use oasis_contract_sdk::{testing::MockContext, types::ExecutionContext, Contract};\n\n    use super::*;\n\n    #[test]\n    fn test_hello() {\n        // Create a mock execution context with default values.\n        let mut ctx: MockContext = ExecutionContext::default().into();\n\n        // Instantiate the contract.\n        HelloWorld::instantiate(\n            &mut ctx,\n            Request::Instantiate {\n                initial_counter: 11,\n            },\n        )\n        .expect("instantiation should work");\n\n        // Dispatch the SayHello message.\n        let rsp = HelloWorld::call(\n            &mut ctx,\n            Request::SayHello {\n                who: "unit test".to_string(),\n            },\n        )\n        .expect("SayHello call should work");\n\n        // Make sure the greeting is correct.\n        assert_eq!(\n            rsp,\n            Response::Hello {\n                greeting: "hello unit test (11)".to_string()\n            }\n        );\n\n        // Dispatch another SayHello message.\n        let rsp = HelloWorld::call(\n            &mut ctx,\n            Request::SayHello {\n                who: "second call".to_string(),\n            },\n        )\n        .expect("SayHello call should work");\n\n        // Make sure the greeting is correct.\n        assert_eq!(\n            rsp,\n            Response::Hello {\n                greeting: "hello second call (12)".to_string()\n            }\n        );\n    }\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This is it! You now have a simple hello world smart contract with included unit\ntests for its functionality. You can also look at other smart contract handles\nsupported by the ",(0,s.jsx)(t.a,{href:"https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/src/contract.rs",children:"Oasis Contract SDK"}),"."]}),"\n",(0,s.jsx)(t.admonition,{title:"PublicCell object",type:"tip",children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"PublicCell<T>"})," can use any type ",(0,s.jsx)(t.code,{children:"T"})," which implements ",(0,s.jsx)(t.code,{children:"oasis_cbor::Encode"})," and\n",(0,s.jsx)(t.code,{children:"oasis_cbor::Decode"}),"."]})}),"\n",(0,s.jsx)(t.admonition,{title:"Context object",type:"tip",children:(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"ctx"})," argument contains the contract context analogous to ",(0,s.jsx)(t.code,{children:"msg"})," and ",(0,s.jsx)(t.code,{children:"this"}),"\nin the EVM world. To learn more head to the ",(0,s.jsx)(t.a,{href:"https://api.docs.oasis.io/oasis-sdk/oasis_contract_sdk/context/trait.Context.html",children:"Context"})," trait in our Rust API."]})}),"\n",(0,s.jsx)(t.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(t.p,{children:"To run unit tests type:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:'RUSTFLAGS="-C target-feature=+aes,+ssse3" cargo test\n'})}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"Running unit tests locally requires a physical or virtualized Intel-compatible\nCPU with AES and SSSE3 instruction sets."})}),"\n",(0,s.jsx)(t.h2,{id:"building-for-deployment",children:"Building for Deployment"}),"\n",(0,s.jsx)(t.p,{children:"In order to build the smart contract before it can be uploaded to the target\nchain, run:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"cargo build --target wasm32-unknown-unknown --release\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This will generate a binary file called ",(0,s.jsx)(t.code,{children:"hello_world.wasm"})," under\n",(0,s.jsx)(t.code,{children:"target/wasm32-unknown-unknown/release"})," which contains the smart contract\ncompiled into WebAssembly. This file can be directly deployed on chain."]}),"\n",(0,s.jsx)(t.h2,{id:"deploying-the-contract",children:"Deploying the Contract"}),"\n",(0,s.jsx)(t.p,{children:"Deploying the contract we just built is simple using the Oasis CLI. This section\nassumes that you already have an instance of the CLI set up and that you will\nbe deploying contracts on the existing Testnet where you already have some\nTEST tokens to cover transaction fees."}),"\n",(0,s.jsx)(t.p,{children:"First, switch the default network to Cipher Testnet to avoid the need to pass\nit to every following invocation."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"oasis network set-default testnet\noasis paratime set-default testnet cipher\n"})}),"\n",(0,s.jsx)(t.p,{children:"The first deployment step that needs to be performed only once for the given\nbinary is uploading the Wasm binary."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"oasis contract upload hello_world.wasm\n"})}),"\n",(0,s.jsx)(t.p,{children:"After successful execution it will show the code ID that you need to use for any\nsubsequent instantiation of the same contract. Next, create an instance of the\ncontract by loading the code and calling its constructor with some dummy\narguments. Note that the arguments depend on the contract that is being deployed\nand in our hello world case we are simply taking the initial counter value."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"oasis contract instantiate CODEID '{instantiate: {initial_counter: 42}}'\n"})}),"\n",(0,s.jsx)(t.p,{children:"After successful execution it shows the instance ID that you need for calling\nthe instantiated contract. Next, you can test calling the contract."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"oasis contract call INSTANCEID '{say_hello: {who: \"me\"}}'\n"})}),"\n",(0,s.jsx)(t.admonition,{title:"Example",type:"info",children:(0,s.jsxs)(t.p,{children:["You can view and download a ",(0,s.jsx)(t.a,{href:"https://github.com/oasisprotocol/oasis-sdk/tree/main/examples/contract-sdk/hello-world",children:"complete example"})," from the Oasis SDK repository."]})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);