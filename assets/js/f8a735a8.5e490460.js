"use strict";(globalThis.webpackChunkdocs_oasis_io=globalThis.webpackChunkdocs_oasis_io||[]).push([[3218],{2207:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/oasisscan2-00e68913dfa621eb7c5f170e3b2f6378.png"},14534:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/block_explorer2-c07d43edbfeb9e90e1b38710179e9062.png"},21524:(e,n,t)=>{t.d(n,{A:()=>f});t(96540);var r=t(34164),o=t(28774),s=t(26972),a=t(53465),i=t(16654),l=(t(21312),t(51107));const d={cardContainer:"cardContainer_S8oU",cardTitle:"cardTitle_HoSo",cardDescription:"cardDescription_c27F"};var c=t(74848);function h({href:e,children:n}){return(0,c.jsx)(o.A,{href:e,className:(0,r.A)("card padding--lg",d.cardContainer),children:n})}function p({href:e,icon:n,title:t,description:o,customProps:s}){return(0,c.jsxs)(h,{href:e,children:[(0,c.jsx)(l.A,{as:"h3",className:(0,r.A)("text--truncate",d.cardTitle),title:t,children:t}),o&&(0,c.jsx)("p",{className:(0,r.A)("text--truncate",d.cardDescription),title:o,children:o}),s?.tags&&Array.isArray(s.tags)?(0,c.jsx)("div",{className:"pill",children:s.tags.map(e=>(0,c.jsx)("div",{className:"pills__item pills__item--active tag ",children:e},e))}):null]})}function m({item:e}){const n=(0,s.Nr)(e);!function(){const{selectMessage:e}=(0,a.W)()}();return n?(0,c.jsx)(p,{href:n,icon:"\ud83d\uddc3\ufe0f",title:e.label,description:e.description,customProps:e.customProps}):null}function u({item:e}){const n=(0,i.A)(e.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",t=(0,s.cC)(e.docId??void 0);return(0,c.jsx)(p,{href:e.href,icon:n,title:e.label,description:e.description??t?.description,customProps:e.customProps})}function f({item:e}){switch(e.type){case"link":return(0,c.jsx)(u,{item:e});case"category":return(0,c.jsx)(m,{item:e});default:throw new Error(`unknown item type ${JSON.stringify(e)}`)}}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(96540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},34853:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"build/tools/other-paratimes/emerald/writing-dapps-on-emerald","title":"Writing dApps on Emerald","description":"This tutorial will show you how to set up dApp development environment for","source":"@site/docs/build/tools/other-paratimes/emerald/writing-dapps-on-emerald.mdx","sourceDirName":"build/tools/other-paratimes/emerald","slug":"/build/tools/other-paratimes/emerald/writing-dapps-on-emerald","permalink":"/build/tools/other-paratimes/emerald/writing-dapps-on-emerald","draft":false,"unlisted":false,"editUrl":"https://github.com/oasisprotocol/docs/edit/main/docs/build/tools/other-paratimes/emerald/writing-dapps-on-emerald.mdx","tags":[],"version":"current","lastUpdatedAt":1761867754000,"frontMatter":{"sidebar_custom_props":{}},"sidebar":"developers","previous":{"title":"Network Information","permalink":"/build/tools/other-paratimes/emerald/network"}}');var o=t(74848),s=t(28453),a=t(21524),i=t(56116);const l={sidebar_custom_props:{tags:void 0}},d="Writing dApps on Emerald",c={},h=[{value:"Oasis Consensus Layer and Emerald ParaTime",id:"oasis-consensus-layer-and-emerald-paratime",level:2},{value:"Testnet and Mainnet",id:"testnet-and-mainnet",level:2},{value:"Localnet",id:"localnet",level:2},{value:"Create dApp on Emerald with Hardhat",id:"create-dapp-on-emerald-with-hardhat",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Deployment of my contract timed out on Testnet or Mainnet",id:"deployment-of-my-contract-timed-out-on-testnet-or-mainnet",level:3},{value:"Execution of my contract failed. How do I debug what went wrong?",id:"execution-of-my-contract-failed-how-do-i-debug-what-went-wrong",level:3},{value:"See also",id:"see-also",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"writing-dapps-on-emerald",children:"Writing dApps on Emerald"})}),"\n",(0,o.jsxs)(n.p,{children:["This tutorial will show you how to set up dApp development environment for\nEmerald to be able to write and deploy dApps on Oasis Emerald.\nOasis Emerald exposes an ",(0,o.jsx)(n.strong,{children:"EVM-compatible"})," interface so writing dApps isn't much\ndifferent compared to the original Ethereum Network!"]}),"\n",(0,o.jsx)(n.p,{children:"We will walk you through the Hardhat configuration."}),"\n",(0,o.jsxs)(n.p,{children:["Those who prefer a simpler web-only interface can also use the Remix IDE. Check out our\ngeneral ",(0,o.jsx)(n.a,{href:"/build/tools/remix",children:"Remix guide"}),". Just remember to use the Emerald ",(0,o.jsx)(n.a,{href:"/build/tools/other-paratimes/emerald/network#rpc-endpoints",children:"networks"}),"\nwhen selecting ",(0,o.jsx)(n.em,{children:"Inject Web3"})," environment and connecting to MetaMask."]}),"\n",(0,o.jsx)(n.h2,{id:"oasis-consensus-layer-and-emerald-paratime",children:"Oasis Consensus Layer and Emerald ParaTime"}),"\n",(0,o.jsxs)(n.p,{children:["Oasis Network consists of the consensus layer and a number of Layer 2 chains\ncalled the ParaTimes (to learn more, check the ",(0,o.jsx)(n.a,{href:"/general/oasis-network/",children:"Oasis Network\nOverview"})," chapter). Emerald is a ParaTime which implements the Ethereum\nVirtual Machine (EVM)."]}),"\n",(0,o.jsxs)(n.p,{children:["The minimum and also expected block time in Emerald is ",(0,o.jsx)(n.strong,{children:"6 seconds"}),". Any\nEmerald transaction will require at least this amount of time to be executed."]}),"\n",(0,o.jsxs)(n.p,{children:["The native Oasis addresses are Bech32-encoded (e.g. ",(0,o.jsx)(n.code,{children:"oasis1qpupfu7e2n6pkezeaw0yhj8mcem8anj64ytrayne"}),")\nwhile Emerald supports both the Bech32-encoded and the Ethereum-compatible\nhex-encoded addresses (e.g. ",(0,o.jsx)(n.code,{children:"0x90adE3B7065fa715c7a150313877dF1d33e777D5"}),"). The\nunderlying algorithm for signing the transactions is ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/EdDSA#Ed25519",children:"Ed25519"})," on the Consensus\nlayer and both ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/EdDSA#Ed25519",children:"Ed25519"})," and ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm",children:"ECDSA"})," in Emerald. The Ed25519 scheme is used\nmostly by the Emerald compute nodes for managing their computation rewards. For\nsigning your dApp-related transactions on Emerald you will probably want to use\nECDSA since this is the de facto scheme supported by Ethereum wallets and\nlibraries."]}),"\n",(0,o.jsxs)(n.p,{children:["Finally, the ParaTimes are not allowed to directly access your tokens stored in\nConsensus layer addresses. You will need to ",(0,o.jsx)(n.strong,{children:"deposit"})," tokens from your consensus\naccount to Emerald. Consult the ",(0,o.jsx)(n.a,{href:"/general/manage-tokens/",children:"How to transfer ROSE into Emerald\nParaTime"})," chapter to learn more."]}),"\n",(0,o.jsx)(n.h2,{id:"testnet-and-mainnet",children:"Testnet and Mainnet"}),"\n",(0,o.jsxs)(n.p,{children:["The Oasis Network currently has, similar to some other blockchains, two major\npublic deployments: the ",(0,o.jsx)(n.a,{href:"/node/network/mainnet",children:"Mainnet"})," and the ",(0,o.jsx)(n.a,{href:"/node/network/testnet",children:"Testnet"}),". The\nnative tokens are called ROSE and TEST respectively. Each deployment has its own\nstate, a different set of validators and ParaTimes. The state of the Mainnet is\nconsidered immutable for indefinite time, while the data on the Testnet can be\nsubject to wipe in the future."]}),"\n",(0,o.jsxs)(n.p,{children:["The Emerald ParaTime is deployed similarly: the ",(0,o.jsx)(n.a,{href:"/build/tools/other-paratimes/emerald/network",children:"Emerald Mainnet"})," is deployed on the Oasis Mainnet\nNetwork while the ",(0,o.jsx)(n.a,{href:"/build/tools/other-paratimes/emerald/network",children:"Emerald Testnet"})," on the Oasis Testnet Network. The Emerald state on the Mainnet\nis stable. Testnet, apart from running the unstable version of the code and being prone to bugs, can\nhave the state deliberately wiped either on the Emerald ParaTime layer or on the Oasis Testnet\nNetwork level."]}),"\n",(0,o.jsx)(n.admonition,{title:"Never deploy production service on Testnet",type:"danger",children:(0,o.jsxs)(n.p,{children:["Because Testnet state can be wiped in the future, you should ",(0,o.jsx)(n.strong,{children:"never deploy a\nproduction service on the Testnet"}),"!"]})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["For testing purposes, visit our ",(0,o.jsx)(n.a,{href:"https://faucet.testnet.oasis.io/",children:"Testnet faucet"})," to obtain some TEST which you\ncan then use on the Emerald Testnet to pay for gas fees. The faucet supports\nsending TEST both to your Consensus layer address or to your address inside the\nParaTime."]})}),"\n",(0,o.jsx)(n.h2,{id:"localnet",children:"Localnet"}),"\n",(0,o.jsxs)(n.p,{children:["For development and testing, you can run a local ",(0,o.jsx)(n.a,{href:"/build/tools/localnet",children:"instance"})," of the\nentire Emerald stack."]}),"\n",(0,o.jsx)(n.h2,{id:"create-dapp-on-emerald-with-hardhat",children:"Create dApp on Emerald with Hardhat"}),"\n",(0,o.jsx)(n.p,{children:"Let's begin writing our dApp with Hardhat. We will lay out a base for a modern\ndApp including TypeScript bindings for tests and later for the frontend\napplication."}),"\n",(0,o.jsxs)(n.p,{children:["First, make sure you installed ",(0,o.jsx)(n.a,{href:"https://nodejs.org",children:"Node.js"})," and that you have ",(0,o.jsx)(n.code,{children:"npm"})," and ",(0,o.jsx)(n.code,{children:"npx"}),"\nreadily available. Then run:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npx hardhat init\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Select the ",(0,o.jsx)(n.code,{children:"Create an advanced sample project that uses TypeScript"})," option and\nenter the root directory for your project. You can leave other options as\ndefault. After a while Hardhat will finish downloading the dependencies and\ncreate a simple greeter dApp."]}),"\n",(0,o.jsx)(n.p,{children:"To compile, deploy and test the smart contract of your sample project locally,\nmove to your project directory and type:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"$ npx hardhat compile\nCompiling 2 files with 0.8.4\nGenerating typings for: 2 artifacts in dir: typechain for target: ethers-v5\nSuccessfully generated 5 typings!\nCompilation finished successfully\n\n$ npx hardhat test\nNo need to generate any newer typings.\n\n\n  Greeter\nDeploying an Emerald Greeter with greeting: Hello, world!\nChanging greeting from 'Hello, world!' to 'Hola, mundo!'\n    \u2713 Should return the new greeting once it's changed (613ms)\n\n\n  1 passing (614ms)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Hardhat already comes with a built-in EVM which is spun up from scratch each\ntime we call ",(0,o.jsx)(n.code,{children:"hardhat test"})," without parameters. It populates 20 accounts with\nETH and registers them to the ",(0,o.jsx)(n.a,{href:"https://docs.ethers.io/v5/",children:"ethers.js"})," instance used in the tests."]}),"\n",(0,o.jsxs)(n.p,{children:["Next, let's look at how to configure Hardhat for Emerald. For convenience, we\nassign the ",(0,o.jsx)(n.code,{children:"PRIVATE_KEY"})," environment variable a hex-encoded private key of your\nEmerald wallet containing tokens to pay for gas fees. If you are running\n",(0,o.jsx)(n.a,{href:"/build/tools/localnet",children:"localnet"}),", use any of the five generated private keys."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'export PRIVATE_KEY="YOUR_0x_EMERALD_PRIVATE_KEY"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Next, we configure three networks: ",(0,o.jsx)(n.code,{children:"emerald_local"}),", ",(0,o.jsx)(n.code,{children:"emerald_testnet"}),", and\n",(0,o.jsx)(n.code,{children:"emerald_mainnet"}),". Open ",(0,o.jsx)(n.code,{children:"hardhat.config.ts"})," and replace the ",(0,o.jsx)(n.code,{children:"networks"})," field to\nmatch the following:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'networks: {\n    emerald_local: {\n      url: "http://localhost:8545",\n      accounts:\n        process.env.PRIVATE_KEY !== undefined ? [process.env.PRIVATE_KEY] : [],\n    },\n    emerald_testnet: {\n      url: "https://testnet.emerald.oasis.io",\n      accounts:\n        process.env.PRIVATE_KEY !== undefined ? [process.env.PRIVATE_KEY] : [],\n    },\n    emerald_mainnet: {\n      url: "https://emerald.oasis.io",\n      accounts:\n        process.env.PRIVATE_KEY !== undefined ? [process.env.PRIVATE_KEY] : [],\n    },\n  },\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Next, we increase the default timeout for mocha tests from 20 seconds to 60\nseconds. This step is not needed, if you will test your contracts solely on\n",(0,o.jsx)(n.a,{href:"/build/tools/localnet",children:"localnet"}),", but is required for Testnet to avoid timeouts. Append the\nfollowing block to the ",(0,o.jsx)(n.code,{children:"config"})," object:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"mocha: {\n  timeout: 60000\n}\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"geth --dev"})," and ",(0,o.jsx)(n.code,{children:"ganache-cli"}),' tools use a so-called "instant mining" mode.\nIn this mode, a new block is mined immediately when a new transaction occurs in\nthe mempool. Neither Oasis Mainnet and Testnet Networks nor ',(0,o.jsx)(n.a,{href:"/build/tools/localnet",children:"localnet"}),"\nsupport such mode and the new block will always be mined at least after the 1\nsecond block time elapsed."]})}),"\n",(0,o.jsxs)(n.p,{children:["Now deploy the contract to the ",(0,o.jsx)(n.a,{href:"/build/tools/localnet",children:"localnet"})," Docker container by selecting the\n",(0,o.jsx)(n.code,{children:"emerald_local"})," network we configured above and run the tests:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"$ npx hardhat run scripts/deploy.ts --network emerald_local\nNo need to generate any newer typings.\nGreeter deployed to: 0x4e1de2f6cf4e57a8f55b4a5dd1fce770db734962\n\n$ npx hardhat test --network emerald_local\nNo need to generate any newer typings.\n\n\n  Greeter\n    \u2713 Should return the new greeting once it's changed (6017ms)\n\n\n  1 passing (6s)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Next, you can try deploying the contract to the Testnet. Temporarily replace\nyour ",(0,o.jsx)(n.code,{children:"PRIVATE_KEY"})," environment variable with your Testnet one and deploy the\ncontract by using the ",(0,o.jsx)(n.code,{children:"emerald_testnet"})," network. Similarly, you can also\nrun the tests."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'$ PRIVATE_KEY="0xYOUR_TESTNET_PRIVATE_KEY" npx hardhat run scripts/deploy.ts --network emerald_testnet\nNo need to generate any newer typings.\nGreeter deployed to: 0x735df9F166a2715bCA3D3A66B119CBef95a0D129\n\n$ PRIVATE_KEY="0xYOUR_TESTNET_PRIVATE_KEY" npx hardhat test --network emerald_testnet\nNo need to generate any newer typings.\n\n\n  Greeter\n    \u2713 Should return the new greeting once it\'s changed (21016ms)\n\n\n  1 passing (6s)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Congratulations, you have just deployed your first smart contract to the public\nEmerald Testnet Network! If you are unsure, whether your contract was\nsuccessfully deployed, you can monitor the transactions on the Emerald block\nexplorer (",(0,o.jsx)(n.a,{href:"https://explorer.oasis.io/mainnet/emerald",children:"Mainnet"}),", ",(0,o.jsx)(n.a,{href:"https://explorer.oasis.io/testnet/emerald",children:"Testnet"}),"). This tool\nindexes all Emerald accounts, blocks, transactions and even offers a neat user\ninterface for browsing ETH-specifics like the ERC20 tokens and the ERC721 NFTs."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Emerald Block Explorer showing the latest transactions",src:t(95741).A+"",width:"2205",height:"1335"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Emerald Block Explorer showing our account 0x90adE3B7065fa715c7a150313877dF1d33e777D5 used for deploying the smart contract",src:t(14534).A+"",width:"2208",height:"1339"})}),"\n",(0,o.jsxs)(n.p,{children:["Finally, by selecting the ",(0,o.jsx)(n.code,{children:"emerald_mainnet"})," network and the corresponding\nprivate key, we can deploy the contract on the Mainnet:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'$ PRIVATE_KEY="0xYOUR_MAINNET_PRIVATE_KEY" npx hardhat run scripts/deploy.ts --network emerald_mainnet\nNo need to generate any newer typings.\nGreeter deployed to: 0x6e8e9e0DBCa4EF4a65eBCBe4032e7C2a6fb7C623\n'})}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(n.h3,{id:"deployment-of-my-contract-timed-out-on-testnet-or-mainnet",children:"Deployment of my contract timed out on Testnet or Mainnet"}),"\n",(0,o.jsx)(n.p,{children:"Emerald validators, similar to Ethereum ones, order the execution of\ntransactions by gas price. When deploying a contract and the deployment times\nout, first wait another few rounds to make sure that the contract will not be\ndeployed eventually."}),"\n",(0,o.jsxs)(n.p,{children:["Next, check that your ",(0,o.jsx)(n.code,{children:"gasPrice"})," ",(0,o.jsx)(n.strong,{children:"is at least 10 nROSE"})," which is a minimum\nrequired gas price on Emerald. This value should already be propagated\nautomatically by the web3 endpoint, but your deployment configuration might\nhave ignored it."]}),"\n",(0,o.jsxs)(n.p,{children:["Finally, consider increasing the ",(0,o.jsx)(n.code,{children:"gasPrice"})," parameter in the Hardhat config\nfile by a fraction (e.g. 10% or 20%). This will require more ROSE from your\nwallet to deploy the contract, but you will also increase the chance of your\ntransaction being included in the block."]}),"\n",(0,o.jsx)(n.h3,{id:"execution-of-my-contract-failed-how-do-i-debug-what-went-wrong",children:"Execution of my contract failed. How do I debug what went wrong?"}),"\n",(0,o.jsxs)(n.p,{children:["If you are using Testnet or Mainnet, try to debug your transaction by finding\nit on the Emerald block explorer (",(0,o.jsx)(n.a,{href:"https://explorer.oasis.io/mainnet/emerald",children:"Mainnet"}),", ",(0,o.jsx)(n.a,{href:"https://explorer.oasis.io/testnet/emerald",children:"Testnet"}),"):"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Emerald block explorer showing a failed transaction",src:t(47556).A+"",width:"2219",height:"1332"})}),"\n",(0,o.jsxs)(n.p,{children:["In some cases, the transaction result on Emerald block explorer might be stuck\nat ",(0,o.jsx)(n.code,{children:"Error: (Awaiting internal transactions for reason)"}),". In this case or in\ncase of other Consensus layer \u2194 ParaTime issues, try to find your Emerald\ntransaction on the Oasis Scan (",(0,o.jsx)(n.a,{href:"https://oasisscan.com",children:"Mainnet"}),",\n",(0,o.jsx)(n.a,{href:"https://testnet.oasisscan.com",children:"Testnet"}),") which is primarily a Consensus layer explorer, but\noffers some introspection into ParaTime transactions as well. Once you find your\nfailed Emerald transaction, the ",(0,o.jsx)(n.code,{children:"Status"})," field should contain a more verbose\nerror description, for example:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Oasis Scan showing the Out of gas error for a transaction on Emerald",src:t(2207).A+"",width:"2219",height:"1332"})}),"\n",(0,o.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,o.jsx)(a.A,{item:(0,i.$)("/node/run-your-node/paratime-client-node")}),"\n",(0,o.jsx)(a.A,{item:(0,i.$)("/node/web3")})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},47556:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/oasisscan1-024c1033c1ceeff4ca4f4294f544ce9c.png"},53465:(e,n,t)=>{t.d(n,{W:()=>d});var r=t(96540),o=t(44586);const s=["zero","one","two","few","many","other"];function a(e){return s.filter(n=>e.includes(n))}const i={locale:"en",pluralForms:a(["one","other"]),select:e=>1===e?"one":"other"};function l(){const{i18n:{currentLocale:e}}=(0,o.A)();return(0,r.useMemo)(()=>{try{return function(e){const n=new Intl.PluralRules(e);return{locale:e,pluralForms:a(n.resolvedOptions().pluralCategories),select:e=>n.select(e)}}(e)}catch(n){return console.error(`Failed to use Intl.PluralRules for locale "${e}".\nDocusaurus will fallback to the default (English) implementation.\nError: ${n.message}\n`),i}},[e])}function d(){const e=l();return{selectMessage:(n,t)=>function(e,n,t){const r=e.split("|");if(1===r.length)return r[0];r.length>t.pluralForms.length&&console.error(`For locale=${t.locale}, a maximum of ${t.pluralForms.length} plural forms are expected (${t.pluralForms.join(",")}), but the message contains ${r.length}: ${e}`);const o=t.select(n),s=t.pluralForms.indexOf(o);return r[Math.min(s,r.length-1)]}(t,n,e)}}},56116:(e,n,t)=>{t.d(n,{$:()=>a});var r=t(23025),o=t(44586);function s(e){for(const n of e){const e=n.href;e&&void 0===globalThis.sidebarItemsMap[e]&&(globalThis.sidebarItemsMap[e]=n),"category"===n.type&&s(n.items)}}function a(e){const{siteConfig:n,siteMetadata:t}=(0,o.A)(),a=(0,r.r)();if(!a)throw new Error("Unexpected: cant find docsVersion in current context");if(void 0===globalThis.sidebarItemsMap){globalThis.sidebarItemsMap={};for(const e in a.docsSidebars)s(a.docsSidebars[e])}if(void 0===globalThis.sidebarItemsMap[e]){if(console.log(`Item ${e} not found. Registered sidebar items:`),console.log(globalThis.sidebarItemsMap),"throw"==n.onBrokenMarkdownLinks)throw new Error(`Unexpected: sidebar item with href ${e} does not exist.`);return globalThis.sidebarItemsMap["/general/"]}return globalThis.sidebarItemsMap[e]}},95741:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/block_explorer1-300ad8505c206bca6ecb6416836e6770.png"}}]);